Comment out dedicated PGI-code, as NVHPC does not support several intrinsics in the initialization phase.
Author: s.griessbach@fz-juelich.de
--- yaxt-0.10.0/tests/ftest_common.f90.orig	2023-09-25 12:25:44.043236000 +0200
+++ yaxt-0.10.0/tests/ftest_common.f90	2023-09-25 12:26:49.481282000 +0200
@@ -1220,21 +1220,21 @@
     ! double precision real and gfortran warns about that. For that
     ! reason the below expression limits scale_val to those 1-bits
     ! which can be represented in a double precision constant
-#if ! defined __PGI || __PGIC__ > 22
-    INTEGER(i8), PARAMETER :: scale_val &
-         = IAND(HUGE(a), NOT(ISHFT(1_i8, BIT_SIZE(1_i8) &
-         &                               - DIGITS(0.0_c_double))  - 1 ) )
-#else
+! #if ! defined __PGI || __PGIC__ > 22
+!     INTEGER(i8), PARAMETER :: scale_val &
+!          = IAND(HUGE(a), NOT(ISHFT(1_i8, BIT_SIZE(1_i8) &
+!          &                               - DIGITS(0.0_c_double))  - 1 ) )
+! #else
     INTEGER(i8) :: scale_val
-#endif
+! #endif
     REAL(c_double) :: rand_nums(block_len), sc
     n = SIZE(a)
     nb = n/block_len
-#if defined __PGI && __PGIC__ <= 22
-    scale_val &
-         = IAND(HUGE(a), NOT(ISHFT(1_i8, BIT_SIZE(1_i8) &
-         &                               - DIGITS(0.0_c_double))  - 1 ) )
-#endif
+! #if defined __PGI && __PGIC__ <= 22
+!     scale_val &
+!          = IAND(HUGE(a), NOT(ISHFT(1_i8, BIT_SIZE(1_i8) &
+!          &                               - DIGITS(0.0_c_double))  - 1 ) )
+! #endif
 
     sc = REAL(scale_val, c_double)
     DO j = 1, nb
