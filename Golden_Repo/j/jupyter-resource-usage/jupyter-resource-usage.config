import os

def get_cgroup_version():
    if os.path.exists('/sys/fs/cgroup/cgroup.controllers'):
        return "v2"
    return "v1"

###########################
# set memory limit for ResourceDisplay
###########################
memory_limit_in_bytes = -1
if get_cgroup_version() == 'v1':

    # Get the cgroup path for the current process
    subsystem = 'memory'
    with open('/proc/self/cgroup', 'r') as f:
        for line in f:
            parts = line.strip().split(':')
            subsystems = parts[1].strip().split(',')
            for ssystem in parts[1].strip().split(','):
                if subsystem == ssystem:
                    cgroup_path = parts[2]

    # Check if there is a memory limit in the cgroup
    memory_cgroup_path = f'/sys/fs/cgroup/{subsystem}/{cgroup_path}'
    if not os.path.isdir(memory_cgroup_path):
        memory_cgroup_path = f'/sys/fs/cgroup/{subsystem}/'

    memory_limit_file = os.path.join(memory_cgroup_path, 'memory.limit_in_bytes')
    try:
        with open(memory_limit_file, 'r') as f:
            memory_limit_in_bytes = int(f.read().strip())
    except FileNotFoundError:
        print(f"The file '{memory_limit_file}' does not exist.")

elif get_cgroup_version() == 'v2':
    try:
    # Get the memory limit from the user's memory limit file
        current_user_id = os.geteuid()
        memory_limit_file = f'/sys/fs/cgroup/user.slice/user-{current_user_id}.slice/memory.max'
        with open(memory_limit_file, 'r') as f:
            memory_limit_in_bytes = int(f.read().strip())
    except FileNotFoundError:
        try:
        # Get the memory limit from the general memory limit file
            memory_limit_file = f'/sys/fs/cgroup/memory.max'
            with open(memory_limit_file, 'r') as f:
                memory_limit_in_bytes = int(f.read().strip())
        except FileNotFoundError:
            print(f"The file '{memory_limit_file}' does not exist.")

physical_memory = os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_PHYS_PAGES')
if memory_limit_in_bytes < 0 or memory_limit_in_bytes > physical_memory:
    memory_limit = physical_memory
else:
    memory_limit = memory_limit_in_bytes

c.ResourceUseDisplay.mem_limit = memory_limit
c.ResourceUseDisplay.mem_warning_threshold = 0.1

###########################
# set cpu limit for ResourceDisplay
###########################
cpu_cfs_quota_us = -1
cpu_cfs_period_us = -1
if get_cgroup_version() == 'v1':
    # Get the cgroup path for the current process
    subsystem = 'cpu'
    with open('/proc/self/cgroup', 'r') as f:
        for line in f:
            parts = line.strip().split(':')
            subsystems = parts[1].strip().split(',')
            for ssystem in parts[1].strip().split(','):
                if subsystem == ssystem:
                    cgroup_path = parts[2]

    # Check if there is a CPU limit in the cgroup
    cpu_cgroup_path = f'/sys/fs/cgroup/{subsystem}/{cgroup_path}'
    if not os.path.isdir(cpu_cgroup_path):
        cpu_cgroup_path = f'/sys/fs/cgroup/{subsystem}/'

    cpu_cfs_quota_file = os.path.join(cpu_cgroup_path, 'cpu.cfs_quota_us')
    try:
        with open(cpu_cfs_quota_file, 'r') as f:
            cpu_cfs_quota_us = int(f.read().strip())
    except FileNotFoundError:
        print(f"The file '{cpu_cfs_quota_file}' does not exist.")

    cpu_cfs_period_file = os.path.join(cpu_cgroup_path, 'cpu.cfs_period_us')
    try:
        with open(cpu_cfs_period_file, 'r') as f:
            cpu_cfs_period_us = int(f.read().strip())
    except FileNotFoundError:
        print(f"The file '{cpu_cfs_period_file}' does not exist.")

elif get_cgroup_version() == 'v2':
    try:
    # Get the cpu limit from the user's cpu limit file
        current_user_id = os.geteuid()
        cpu_max_file = f'/sys/fs/cgroup/user.slice/user-{current_user_id}.slice/cpu.max'
        with open(cpu_max_file, 'r') as f:
            f_contents = f.read().strip()
            max_str, period_str = f_contents.split()
            cpu_cfs_quota_us = int(max_str)
            cpu_cfs_period_us = int(period_str)
    except FileNotFoundError:
        try:
        # Get the cpu limit from the general cpu limit file
            cpu_max_file = f'/sys/fs/cgroup/cpu.max'
            with open(cpu_max_file, 'r') as f:
                f_contents = f.read().strip()
                max_str, period_str = f_contents.split()
                cpu_cfs_quota_us = int(max_str)
                cpu_cfs_period_us = int(period_str)
        except FileNotFoundError:
            print(f"The file '{cpu_max_file}' does not exist.")

if cpu_cfs_quota_us < 0:
    cpu_limit = os.cpu_count()
else:
    cpu_limit = cpu_cfs_quota_us / cpu_cfs_period_us

c.ResourceUseDisplay.track_cpu_percent = True
c.ResourceUseDisplay.cpu_limit = cpu_limit
c.ResourceUseDisplay.cpu_warning_threshold = 0.1

