From 740724ad355a1b6d30fef6ba3be0a78135ad76c9 Mon Sep 17 00:00:00 2001
From: Jens Henrik Goebbert <j.goebbert@fz-juelich.de>
Date: Wed, 5 Jul 2023 19:45:13 +0200
Subject: [PATCH] fix Protocol.js

- uintToString(..) does not exist. Hence, Uint8ToString(..) from lib/rencode.js imported at line 627 is used
- Utilities is not in scope so Utilities.StringToUint8(..) fails. Hence, StringToUint8(..) got added to class XpraProtocol
- Utilities is not in scope so Utilities.Uint8ToString(..) fails. Hence, Uint8ToString(..) from lib/rencode.js imported at line 627 is used
- ord(..) is not defined. Hence, ord(..) got added to class XpraProtocol
---
 html5/js/Protocol.js | 16 ++++++++++++----
 1 file changed, 12 insertions(+), 4 deletions(-)

diff --git a/html5/js/Protocol.js b/html5/js/Protocol.js
index 3a90d571..ed1ed0ad 100644
--- a/html5/js/Protocol.js
+++ b/html5/js/Protocol.js
@@ -234,6 +234,14 @@ class XpraProtocol {
     console.log.apply(console, arguments);
   }
 
+  StringToUint8(string_) {
+    return Uint8Array.from([...string_].map((x) => x.charCodeAt(0)));
+  }
+
+  ord(c) {
+    return c.charCodeAt(0);
+  }
+
   do_process_receive_queue() {
     if (this.header.length < 8 && this.rQ.length > 0) {
       //add from receive queue data to header until we get the 8 bytes we need:
@@ -352,7 +360,7 @@ class XpraProtocol {
 
     // decrypt if needed
     if (proto_crypto) {
-      this.cipher_in.update(forge.util.createBuffer(uintToString(packet_data)));
+      this.cipher_in.update(forge.util.createBuffer(Uint8ToString(packet_data)));
       const decrypted = this.cipher_in.output.getBytes();
       if (!decrypted || decrypted.length < packet_size - padding) {
         this.error("error decrypting packet using", this.cipher_in);
@@ -368,7 +376,7 @@ class XpraProtocol {
         this.raw_packets = [];
         return this.rQ.length > 0;
       }
-      packet_data = Utilities.StringToUint8(
+      packet_data = this.StringToUint8(
         decrypted.slice(0, packet_size - padding)
       );
     }
@@ -464,7 +472,7 @@ class XpraProtocol {
           this.cipher_out_block_size -
           (payload_size % this.cipher_out_block_size);
         let input_data =
-          typeof bdata === "string" ? bdata : Utilities.Uint8ToString(bdata);
+          typeof bdata === "string" ? bdata : Uint8ToString(bdata);
         if (padding_size) {
           const padding_char = String.fromCharCode(padding_size);
           input_data += padding_char.repeat(padding_size);
@@ -490,7 +498,7 @@ class XpraProtocol {
       } else {
         //copy string one character at a time..
         for (let index = 0; index < actual_size; index++) {
-          packet_data[8 + index] = ord(bdata[index]);
+          packet_data[8 + index] = this.ord(bdata[index]);
         }
       }
       // put into buffer before send
