# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
easyblock = 'JuliaBundle'

name = 'JupyterKernel-Julia'
version = '1.6.1'
local_jupyterver = '2020.2.6'
versionsuffix = '-' + local_jupyterver

local_pysuffix = '-Python-%(pyver)s'

homepage = 'https://github.com/JuliaLang/IJulia.jl'
description = """
Native Julia kernel for Jupyter.
Project Jupyter exists to develop open-source software, open-standards, and services
for interactive computing across dozens of programming languages.
"""


toolchain = {'name': 'gcccoremkl', 'version': '9.3.0-2020.2.254'}
toolchainopts = {'pic': True}

builddependencies = [
    ('binutils', '2.34'),
]

dependencies = [
    ('Python', '3.8.5'),
    ('Julia', version),
]

components = [
    ('julia', '0.5.6', {
        'easyblock': 'PythonPackage',
        'req_py_majver': '3',
        'req_py_minver': '0',
        'use_pip': True,
        'sources': ['v%(version)s.tar.gz'],
        'source_urls': ['https://github.com/JuliaPy/pyjulia/archive/'],
        'checksums': [('sha256', 'ca4a1dc3df9b770dacbbecab5495cae817a5dde0ac2d3ff1db1f8e447f0e48b7')],
        'download_dep_fail': True,
        'start_dir': 'pyjulia-%(version)s',
    }),
]

local_jupyter_path = 'share/jupyter'

exts_defaultclass = 'JuliaPackage'
exts_list = [
    ('ZMQ', '1.2.1', {
        'source_tmpl': 'v1.2.1.tar.gz',
        'source_urls': ['https://github.com/JuliaInterop/ZMQ.jl/archive/'],
    }),
    ('IJulia', '1.23.2', {
        # installs ijulia in JULIA_DEPOT_PATH and kernel in $JUPYTER_DATA_DIR/kernels
        'source_tmpl': 'v1.23.2.tar.gz',
        'source_urls': ['https://github.com/JuliaLang/IJulia.jl/archive/'],
        'preinstallopts': 'export JUPYTER_DATA_DIR=%%(installdir)s/%s' % local_jupyter_path
    }),
    ('Interact', '0.10.3', {
        'source_tmpl': 'v0.10.3.tar.gz',
        'source_urls': ['https://github.com/JuliaGizmos/Interact.jl/archive/'],
    }),
    ('LanguageServer', '3.2.0', {
        'source_tmpl': 'v3.2.0.tar.gz',
        'source_urls': ['https://github.com/julia-vscode/LanguageServer.jl/archive/'],
    }),
]

modextrapaths = {
    'PYTHONPATH': ['lib/python%(pyshortver)s/site-packages'],
    'JUPYTER_PATH': [local_jupyter_path],  # add search path for kernelspecs
}

# Ensure that the user-specific $HOME/.local/share/jupyter is always first entry in JUPYTHER_PATH
modluafooter = """
prepend_path("JUPYTER_PATH", pathJoin(os.getenv("HOME"), ".local/share/jupyter"))
"""

postinstallcmds = [
    # Create virtual environment to ensure we install in the correct directory !!!
    'python3 -m venv %(installdir)s --system-site-packages',
    'mkdir -p %%(installdir)s/%s' % local_jupyter_path,
    (
        '{ cat > %%(builddir)s/env.sh; } << \'EOF\'\n'
        '#!/bin/bash\n'
        'source %%(installdir)s/bin/activate\n'
        'export PYTHONPATH=%%(installdir)s/lib/python%%(pyshortver)s/site-packages:${PYTHONPATH}\n'
        ''
        'export JULIA_DEPOT_PATH=${EBJULIA_STD_DEPOT_PATH}:${EBJULIA_ADMIN_DEPOT_PATH}\n'
        'export JUPYTER_DATA_DIR=%%(installdir)s/%s\n'
        'EOF'
    ) % (local_jupyter_path),

    # configure Python<->Julia bridge (of python package julia)
    'source %(builddir)s/env.sh && python -c "import julia; julia.install()"',

    # Ensure we remove the virtuel environment to avoid wrong search path for python packages
    'rm %(installdir)s/pyvenv.cfg',
    'rm %(installdir)s/bin/python',
    'rm %(installdir)s/bin/python3',
    'rm %(installdir)s/bin/activate',
    'rm %(installdir)s/bin/activate*',
    'rm %(installdir)s/bin/easy_install*',
    'rm %(installdir)s/bin/pip*',
]

# specify that Bundle easyblock should run a full sanity check, rather than just trying to load the module
# full_sanity_check = True
sanity_check_paths = {
    'files': [
        'share/jupyter/kernels/julia-%(version_major_minor)s/kernel.json',
    ],
    'dirs': [
        'lib/python%(pyshortver)s/site-packages',
        'share/jupyter/kernels/julia-%(version_major_minor)s/',
    ],
}

moduleclass = 'tools'
