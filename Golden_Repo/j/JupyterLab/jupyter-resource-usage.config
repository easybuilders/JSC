import os
###########################
# set memory limit for ResourceDisplay
###########################
# Get the cgroup path for the current process
subsystem = 'memory'
with open('/proc/self/cgroup', 'r') as f:
    for line in f:
        parts = line.strip().split(':')
        subsystems = parts[1].strip().split(',')
        for ssystem in parts[1].strip().split(','):
            if subsystem == ssystem:
                cgroup_path = parts[2]

# Check if there is a memory limit in the cgroup
memory_cgroup_path = f'/sys/fs/cgroup/{subsystem}/{cgroup_path}'
if not os.path.isdir(memory_cgroup_path):
    memory_cgroup_path = f'/sys/fs/cgroup/{subsystem}/'

with open(os.path.join(memory_cgroup_path, 'memory.limit_in_bytes'), 'r') as f:
    memory_limit_in_bytes = int(f.read().strip())

physical_memory = os.sysconf('SC_PAGE_SIZE') * os.sysconf('SC_PHYS_PAGES')
if memory_limit_in_bytes < 0 or memory_limit_in_bytes > physical_memory:
    memory_limit = physical_memory
else:
    memory_limit = memory_limit_in_bytes

c.ResourceUseDisplay.mem_limit = memory_limit
c.ResourceUseDisplay.mem_warning_threshold = 0.1

###########################
# set cpu limit for ResourceDisplay
###########################
# Get the cgroup path for the current process
subsystem = 'cpu'
with open('/proc/self/cgroup', 'r') as f:
    for line in f:
        parts = line.strip().split(':')
        subsystems = parts[1].strip().split(',')
        for ssystem in parts[1].strip().split(','):
            if subsystem == ssystem:
                cgroup_path = parts[2]

# Check if there is a CPU limit in the cgroup
cpu_cgroup_path = f'/sys/fs/cgroup/{subsystem}/{cgroup_path}'
if not os.path.isdir(cpu_cgroup_path):
    cpu_cgroup_path = f'/sys/fs/cgroup/{subsystem}/'

with open(os.path.join(cpu_cgroup_path, 'cpu.cfs_quota_us'), 'r') as f:
    cpu_cfs_quota_us = int(f.read().strip())
with open(os.path.join(cpu_cgroup_path, 'cpu.cfs_period_us'), 'r') as f:
    cpu_cfs_period_us = int(f.read().strip())

if cpu_cfs_quota_us < 0:
    cpu_limit = os.cpu_count()
else:
    cpu_limit = cpu_cfs_quota_us / cpu_cfs_period_us

c.ResourceUseDisplay.track_cpu_percent = True
c.ResourceUseDisplay.cpu_limit = cpu_limit
c.ResourceUseDisplay.cpu_warning_threshold = 0.1

