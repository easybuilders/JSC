diff --git a/src/base/hip/hip_vector.hpp b/src/base/hip/hip_vector.hpp
index 0444528..06f2b97 100644
--- a/src/base/hip/hip_vector.hpp
+++ b/src/base/hip/hip_vector.hpp
@@ -30,11 +30,108 @@
 #include "../base_vector.hpp"
 
 #include <hip/hip_runtime.h>
+#include <hip/amd_detail/amd_hip_complex.h>
 
 #include <complex>
 
 #include "hip_rand.hpp"
 
+#if defined(__HIPCC_RTC__)
+#define __HOST_DEVICE__ __device__
+#else
+#define __HOST_DEVICE__ __host__ __device__
+#endif // !defined(__HIPCC_RTC__)
+
+// Gotta put these somewhere
+__HOST_DEVICE__ inline std::complex<float> operator+(const std::complex<float> a, const std::complex<float> b)
+{
+    auto res = a+b;
+    return res;
+}
+__HOST_DEVICE__ inline std::complex<float>& operator+=(std::complex<float>& a, const std::complex<float> b)
+{
+    a = a+b;
+    return a;
+}
+__HOST_DEVICE__ inline std::complex<float> operator-(const std::complex<float> a, const std::complex<float> b)
+{
+    auto res = a-b;
+    return res;
+}
+__HOST_DEVICE__ inline std::complex<float> operator-(const std::complex<float> a)
+{
+    return -a;
+}
+__HOST_DEVICE__ inline std::complex<float>& operator-=(std::complex<float>& a, const std::complex<float> b)
+{
+    a = a-b;
+    return a;
+}
+__HOST_DEVICE__ inline std::complex<float> operator*(const std::complex<float> a, const std::complex<float> b)
+{
+    auto res = a*b;
+    return res;
+}
+__HOST_DEVICE__ inline std::complex<float>& operator*=(std::complex<float>& a, const std::complex<float> b)
+{
+    a = a*b;
+    return a;
+}
+__HOST_DEVICE__ inline std::complex<float> operator/(const std::complex<float> a, const std::complex<float> b)
+{
+    auto res = a/b;
+    return res;
+}
+__HOST_DEVICE__ inline float abs(const std::complex<float> a)
+{
+    return abs(a);
+}
+
+
+__HOST_DEVICE__ inline std::complex<double> operator+(const std::complex<double> a, const std::complex<double> b)
+{
+    auto res = a+b;
+    return res;
+}
+__HOST_DEVICE__ inline std::complex<double>& operator+=(std::complex<double>& a, const std::complex<double> b)
+{
+    a = a+b;
+    return a;
+}
+__HOST_DEVICE__ inline std::complex<double> operator-(const std::complex<double> a, const std::complex<double> b)
+{
+    auto res = a-b;
+    return res;
+}
+__HOST_DEVICE__ inline std::complex<double> operator-(const std::complex<double> a)
+{
+    return -a;
+}
+__HOST_DEVICE__ inline std::complex<double>& operator-=(std::complex<double>& a, const std::complex<double> b)
+{
+    a = a-b;
+    return a;
+}
+__HOST_DEVICE__ inline std::complex<double> operator*(const std::complex<double> a, const std::complex<double> b)
+{
+    auto res = a*b;
+    return res;
+}
+__HOST_DEVICE__ inline std::complex<double>& operator*=(std::complex<double>& a, const std::complex<double> b)
+{
+    a = a*b;
+    return a;
+}
+__HOST_DEVICE__ inline std::complex<double> operator/(const std::complex<double> a, const std::complex<double> b)
+{
+    auto res = a/b;
+    return res;
+}
+__HOST_DEVICE__ inline double abs(const std::complex<double> a)
+{
+    return abs(a);
+}
+
 namespace rocalution
 {
     template <typename ValueType>
