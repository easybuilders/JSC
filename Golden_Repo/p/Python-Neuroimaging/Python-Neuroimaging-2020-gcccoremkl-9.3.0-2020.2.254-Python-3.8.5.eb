# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
easyblock = 'Bundle'

name = 'Python-Neuroimaging'
version = '2020'
versionsuffix = '-Python-%(pyver)s'

homepage = ''
description = """Python Neuroimaging is a collection of open source software for neuroimaging using Python."""


toolchain = {'name': 'gcccoremkl', 'version': '9.3.0-2020.2.254'}
toolchainopts = {'pic': True}

# this is a bundle of Python packages
exts_defaultclass = 'PythonPackage'
exts_filter = ('python -c "import %(ext_name)s"', '')
exts_download_dep_fail = True

dependencies = [
    ('Python', '3.8.5'),
    ('SciPy-Stack', '2020', '-Python-%(pyver)s'),
    ('scikit', '2020', '-Python-%(pyver)s'),
    ('h5py', '2.10.0', '-serial-Python-%(pyver)s'),
    ('PyOpenCL', '2020.2.2', '-Python-%(pyver)s'),
]

# Needed to make sure that the sanity check of mdt works
unwanted_env_vars = ['CUDA_VISIBLE_DEVICES']

exts_list = [
    ('bz2file', '0.98', {
        'source_urls': ['https://pypi.python.org/packages/source/b/bz2file'],
    }),
    ('nibabel', '3.1.1', {
        'source_urls': ['https://pypi.python.org/packages/source/n/nibabel'],
    }),
    ('dipy', '1.2.0', {
        'source_urls': ['https://pypi.python.org/packages/source/d/dipy'],
    }),
    ('nilearn', '0.6.2', {
        'source_urls': ['https://pypi.python.org/packages/source/n/nilearn'],
        'patches': ['nilearn_sklearn.patch']
    }),
    ('neurdflib', '5.0.1', {
        'source_urls': ['https://pypi.python.org/packages/source/n/neurdflib'],
        'modulename': 'rdflib'
    }),
    ('etelemetry', '0.2.2', {
        'source_urls': ['https://pypi.python.org/packages/source/e/etelemetry'],
        'source_tmpl': '%(name)s-%(version)s-py3-none-any.whl',
        'unpack_sources': False,
        'use_pip': True,
    }),
    ('filelock', '3.0.12', {
        'source_urls': ['https://pypi.python.org/packages/source/f/filelock'],
    }),
    ('ci-info', '0.2.0', {
        'source_urls': ['https://pypi.python.org/packages/source/c/ci_info'],
        'modulename': 'ci_info'
    }),
    ('nipype', '1.5.1', {
        'source_urls': ['https://pypi.python.org/packages/source/n/nipype'],
    }),
    ('nipy', '0.4.2', {
        'source_urls': ['https://pypi.python.org/packages/source/n/nipy'],
        'patches': ['nipy_numpy_decorators.patch']
    }),
    ('mne', '0.21.0', {
        'source_urls': ['https://pypi.python.org/packages/source/m/mne'],
    }),
    # 0.3.1 and higher import indent from textwrap, which is a Python 3 feature and therefore it doesn't work with py2
    ('mot', '0.11.3', {
        'source_urls': ['https://pypi.python.org/packages/source/m/mot'],
        # to disable the test, since it needs a working OpenCL installation, which is not always the case in the logins
        'modulename': 'os'
    }),
    # 0.9.38 and higher import indent from textwrap, which is a Python 3 feature and therefore it doesn't work with py2
    ('mdt', '1.2.6', {
        'source_urls': ['https://pypi.python.org/packages/source/m/mdt'],
        # to disable the test, since it needs a working OpenCL installation, which is not always the case in the logins
        'modulename': 'os'
    }),
    ('pysptools', '0.15.0', {
        'source_urls': ['https://pypi.python.org/packages/source/p/pysptools'],
        'modulename': 'pysptools.util'
    }),
]

sanity_check_paths = {
    'files': [],
    'dirs': ['lib/python%(pyshortver)s/site-packages'],
}

modextrapaths = {'PYTHONPATH': ['lib/python%(pyshortver)s/site-packages']}

moduleclass = 'vis'
