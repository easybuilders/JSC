# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
easyblock = 'PythonPackage'

name = 'PyTorch'
version = '1.0.0'
pysuffix = '-Python-%(pyver)s'
versionsuffix = '-GPU%s' % pysuffix

homepage = 'http://pytorch.org/'
description = """Tensors and Dynamic neural networks in Python with strong GPU acceleration.
PyTorch is a deep learning framework that puts Python first."""


toolchain = {'name': 'gcccoremkl', 'version': '7.3.0-2019.0.117'}

download_dep_fail = True
pytorch_3rd_party_dir = 'pytorch-%(version)s/third_party'
extract_cmd_pattern = 'tar -C %s/%s --strip-components=1 -xf %%s'
mkdir_and_extract_cmd_pattern = 'DIR="%s/%s"; mkdir -p $DIR; tar -C $DIR --strip-components=1 -xf %%s'
nested_extract_cmd_pattern = 'tar -C %s/%s/%s --strip-components=1 -xf %%s'

# PyTorch doesn't support easily the usage of external MKL-DNN libraries
# So we just try to be careful and have the same version as the external module
mkldnnver = '0.16'

source_urls = [
    'https://github.com/pytorch/pytorch/archive',
    'https://github.com/ARM-software/ComputeLibrary/archive',
    'https://github.com/Maratyszcza/FP16/archive',
    'https://github.com/Maratyszcza/FXdiv/archive',
    'https://github.com/Maratyszcza/NNPACK/archive',
    'https://github.com/pytorch/QNNPACK/archive',
    'https://github.com/google/benchmark/archive',
    'https://github.com/pytorch/cpuinfo/archive',
    'https://github.com/NVlabs/cub/archive',
    'https://github.com/eigenteam/eigen-git-mirror/archive',
    'https://github.com/pytorch/FBGEMM/archive',
    'https://github.com/asmjit/asmjit/archive',
    'https://github.com/google/gemmlowp/archive',
    'https://github.com/facebookincubator/gloo/archive',
    'https://github.com/google/googletest/archive',
    'https://github.com/intel/ideep/archive',
    'https://github.com/Yangqing/ios-cmake/archive',
    'https://github.com/NVIDIA/nccl/archive',
    'https://github.com/intel/ARM_NEON_2_x86_SSE/archive',
    'https://github.com/onnx/onnx/archive',
    'https://github.com/onnx/onnx-tensorrt/archive',
    'https://github.com/protocolbuffers/protobuf/archive',
    'https://github.com/Maratyszcza/psimd/archive',
    'https://github.com/Maratyszcza/pthreadpool/archive',
    'https://github.com/pybind/pybind11/archive',
    'https://github.com/PeachPy/enum34/archive',
    'https://github.com/Maratyszcza/PeachPy/archive',
    'https://github.com/benjaminp/six/archive',
    'https://github.com/shibatch/sleef/archive',
    'https://github.com/facebook/zstd/archive',
    'https://github.com/01org/mkl-dnn/archive',
    'https://github.com/intel/mkl-dnn/releases/download/v%s' % mkldnnver,
]
# PyTorch pulls in a bunch of submodules which don't have releases.
# We download the submodule revisions from their repos.
sources = [
    'v%(version)s.tar.gz',  # PyTorch
    {
        'download_filename': '2922279.tar.gz',
        'filename': 'ComputeLibrary-2922279.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'ComputeLibrary'),
    },
    {
        'download_filename': '34d4bf0.tar.gz',
        'filename': 'FP16-34d4bf0.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'FP16'),
    },
    {
        'download_filename': 'b742d11.tar.gz',
        'filename': 'FXdiv-b742d11.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'FXdiv'),
    },
    {
        'download_filename': '1e005b0.tar.gz',
        'filename': 'NNPACK-1e005b0.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'NNPACK'),
    },
    {
        'download_filename': 'ef05e87.tar.gz',
        'filename': 'QNNPACK-ef05e87.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'QNNPACK'),
    },
    {
        'download_filename': '505be96.tar.gz',
        'filename': 'benchmark-505be96.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'benchmark'),
    },
    {
        'download_filename': 'c342292.tar.gz',
        'filename': 'cpuinfo-c342292.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'cpuinfo'),
    },
    {
        'download_filename': '285aeeb.tar.gz',
        'filename': 'cub-285aeeb.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'cub'),
    },
    {
        'download_filename': 'f59336c.tar.gz',
        'filename': 'eigen-f59336c.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'eigen'),
    },
    {
        'download_filename': '895646c.tar.gz',
        'filename': 'fbgemm-895646c.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'fbgemm'),
    },
    # FBGEMM needs asmjit
    {
        'download_filename': '1e550aa.tar.gz',
        'filename': 'asmjit-1e550aa.tar.gz',
        'extract_cmd': mkdir_and_extract_cmd_pattern % (pytorch_3rd_party_dir, 'asmjit'),
    },
    {
        'download_filename': '8416bab.tar.gz',
        'filename': 'gemmlowp-8416bab.tar.gz',
        'extract_cmd': nested_extract_cmd_pattern % (pytorch_3rd_party_dir, 'gemmlowp', 'gemmlowp'),
    },
    {
        'download_filename': 'cdeb59d.tar.gz',
        'filename': 'gloo-cdeb59d.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'gloo'),
    },
    {
        'download_filename': '2fe3bd9.tar.gz',
        'filename': 'googletest-2fe3bd9.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'googletest'),
    },
    {
        'download_filename': 'dedff8f.tar.gz',
        'filename': 'ideep-dedff8f.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'ideep'),
    },
    {
        'download_filename': '8abaed6.tar.gz',
        'filename': 'ios-cmake-8abaed6.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'ios-cmake'),
    },
    {
        'download_filename': '3c6e252.tar.gz',
        'filename': 'nccl-3c6e252.tar.gz',
        'extract_cmd': nested_extract_cmd_pattern % (pytorch_3rd_party_dir, 'nccl', 'nccl'),
    },
    {
        'download_filename': '97a126f.tar.gz',
        'filename': 'neon2sse-97a126f.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'neon2sse'),
    },
    {
        'download_filename': '4280470.tar.gz',
        'filename': 'onnx-4280470.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'onnx'),
    },
    {
        'download_filename': 'fa0964e.tar.gz',
        'filename': 'onnx-tensorrt-fa0964e.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'onnx-tensorrt'),
    },
    {
        'download_filename': '2761122.tar.gz',
        'filename': 'protobuf-2761122.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'protobuf'),
    },
    {
        'download_filename': '90a938f.tar.gz',
        'filename': 'psimd-90a938f.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'psimd'),
    },
    {
        'download_filename': '13da0b4.tar.gz',
        'filename': 'pthreadpool-13da0b4.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'pthreadpool'),
    },
    {
        'download_filename': '5c8746f.tar.gz',
        'filename': 'pybind11-5c8746f.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'pybind11'),
    },
    {
        'download_filename': '4cfedc4.tar.gz',
        'filename': 'python-enum-4cfedc4.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'python-enum'),
    },
    {
        'download_filename': '07d8fde.tar.gz',
        'filename': 'python-peachpy-07d8fde.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'python-peachpy'),
    },
    {
        'download_filename': '15e3143.tar.gz',
        'filename': 'python-six-15e3143.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'python-six'),
    },
    {
        'download_filename': '6ff7a13.tar.gz',
        'filename': 'sleef-6ff7a13.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'sleef'),
    },
    {
        'download_filename': 'aec56a5.tar.gz',
        'filename': 'zstd-aec56a5.tar.gz',
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'zstd'),
    },
    # MKL-DNN is expected to be picked up from ideep
    {
        'download_filename': 'v%s.tar.gz' % mkldnnver,
        'filename': 'mkl-dnn-%s.tar.gz' % mkldnnver,
        'extract_cmd': extract_cmd_pattern % (pytorch_3rd_party_dir, 'ideep/mkl-dnn'),
    },
    # MKL-DNN needs a small MKL runtime
    {
        'filename': 'mklml_lnx_2019.0.20180710.tgz',
        'extract_cmd': mkdir_and_extract_cmd_pattern % (pytorch_3rd_party_dir, 'ideep/mkl-dnn/external'),
    },
]

builddependencies = [('CMake', '3.12.3')]

cudaver = '9.2.88'

dependencies = [
    ('Python', '3.6.6'),
    ('SciPy-Stack', '2018b', pysuffix),
    ('FFmpeg', '3.4.5'),
    ('CUDA', cudaver, '', True),
    ('NCCL', '2.4.2-1', '-CUDA-%s' % cudaver),
    ('cuDNN', '7.4.1.5', '-CUDA-%s' % cudaver, True),
]

# Nasty hack
builddir = '%(builddir)s'

prebuildopts = 'export TORCH_CUDA_ARCH_LIST="3.5 3.7" && '
prebuildopts += 'export NCCL_ROOT_DIR="$EBROOTNCCL" && '
# We force /usr/lib64 so gloo is built with verbs support
prebuildopts += 'export LIBRARY_PATH="/usr/lib64:$LIBRARY_PATH" && '
# Hack to pass whatever cmake flags we need. In future PyTorch releases it will change to CMAKE_ARGS
prebuildopts += 'export EXTRA_CAFFE2_CMAKE_FLAGS="-DASMJIT_SRC_DIR=%s/%s/asmjit" && ' % (builddir, pytorch_3rd_party_dir)
prebuildopts += 'export USE_FFMPEG=ON && '
prebuildopts += 'export USE_FBGEMM=ON && '

preinstallopts = 'export LDFLAGS="-ldl $LDFLAGS" && '

runtest = 'export PYTHONPATH=%(builddir)s/%(namelower)s-%(version)s/build/lib.linux-x86_64-%(pyshortver)s:$PYTHONPATH '
# cpp_extensions require "ninja", expecttest require "hypothesis" and utils hangs, so we exclude them.
# torch tests should work, but that means compiling in a GPU node with devel headers, so we disable them as well
runtest += '&& cd test && unset CUDA_VISIBLE_DEVICES && python run_test.py --exclude cpp_extensions expecttest utils torch'
runtest += ' c10d '

options = {'modulename': 'torch'}

sanity_check_paths = {
    'files': [],
    'dirs': ['lib/python%(pyshortver)s/site-packages'],
}

# Add a property
modluafooter = """
add_property("arch","gpu")
"""

moduleclass = 'devel'
