diff -Naur PyFerret-7.6.3.orig/external_functions/ef_utility/site_specific.mk PyFerret-7.6.3/external_functions/ef_utility/site_specific.mk
--- PyFerret-7.6.3.orig/external_functions/ef_utility/site_specific.mk	1970-01-01 01:00:00.000000000 +0100
+++ PyFerret-7.6.3/external_functions/ef_utility/site_specific.mk	2020-12-17 15:22:43.154040000 +0100
@@ -0,0 +1,75 @@
+## Site-dependent definitions included in external function Makefiles
+## of an installed PyFerret directory.
+
+## =========================
+## Machine type for which to build Ferret/PyFerret
+##   x86_64-linux      for 64-bit RHEL
+##   x86_64-linux-gnu  for 64-bit Ubuntu and many "free" Linux systems
+##   i386-linux        for 32-bit RHEL
+##   i386-linux-gnu    for 32-bit Ubuntu and many "free" Linux systems
+##   intel-mac         for Max OSX
+## This value is used to determine which platform_specific.mk
+## file to include in the Makefiles.
+## =========================
+# BUILDTYPE = $(HOSTTYPE)
+BUILDTYPE = x86_64-linux
+# BUILDTYPE = x86_64-linux-gnu
+# BUILDTYPE = i386-linux
+# BUILDTYPE = i386-linux-gnu
+# BUILDTYPE = intel-mac
+
+## =========================
+## INSTALL_FER_DIR and PYTHON_EXE are only used to construct
+## the location of pyferret library.  The library should be
+## (for either 32-bit or 64-bit Linux)
+## $(INSTALL_FER_DIR)/lib/$(PYTHON_EXE)/site-package/pyferret/libpyferret.so
+## or possibly (for 64-bit Linux only)
+## $(INSTALL_FER_DIR)/lib64/$(PYTHON_EXE)/site-package/pyferret/libpyferret.so
+##
+## PyFerret installation directory, usually just $(FER_DIR)
+## Must be $(FER_DIR) when building pyferret from source.
+## (This file is also found in PyFerret installations, thus the option.)
+## =========================
+# INSTALL_FER_DIR = $(HOME)/PyFerret
+INSTALL_FER_DIR = $(FER_DIR)
+
+## =========================
+## C and Fortran compilers to use.  The construct "$(shell which gcc)" assigns
+## the response to "which gcc" run from a Bourne shell (such as bash).
+## When compiling for Mac OS X, one may wish to use clang instead of gcc.
+## If you wish to use values already defined in you shell environment when 
+## you run make, comment out all definitions of CC and FC (do NOT leave blank).
+## =========================
+# CC = $(shell which clang)
+CC = $(shell which gcc)
+FC = $(shell which gfortran) -w -fallow-argument-mismatch -fallow-invalid-boz 
+
+## =========================
+## Linker used to generate executables and shared-object libraries.
+## Normally the Fortran compiler is used which then calls the actual
+## linker with appropriate flags and system-level Fortran libraries.
+## The construct "$(shell which gfortran)" assigns the response to 
+## "which gfortran" run from a Bourne shell (such as bash).
+## If you wish to use a value already defined in you shell environment when 
+## you run make, comment out all definitions of LD (do NOT leave blank).
+## =========================
+LD = $(shell which gfortran)
+
+## =========================
+## Python version used by PyFerret
+## =========================
+# PYTHON_EXE = python2.6
+# PYTHON_EXE = python2.7
+# PYTHON_EXE = python3.6
+# PYTHON_EXE = python3.7
+PYTHON_EXE = python3.8
+
+## =========================
+## FER_LOCAL_EXTFCNS is the directory in which to install
+## the Ferret Fortran external functions.  The example
+## functions that come with the PyFerret installation are
+## installed in $(INSTALL_FER_DIR)/ext_func/pylibs
+## =========================
+FER_LOCAL_EXTFCNS = $(INSTALL_FER_DIR)/ext_func/pylibs
+
+##
diff -Naur PyFerret-7.6.3.orig/Makefile PyFerret-7.6.3/Makefile
--- PyFerret-7.6.3.orig/Makefile	2020-09-28 21:10:48.000000000 +0200
+++ PyFerret-7.6.3/Makefile	2020-12-17 14:37:08.501952000 +0100
@@ -74,10 +74,12 @@
 	  export CFLAGS="$(CFLAGS) -DNDEBUG -O" ; \
 	  export BUILDTYPE=$(BUILDTYPE) ; \
 	  export NETCDF_LIBDIR=$(NETCDF_LIBDIR) ; \
+          export NETCDFFORTRAN_LIBDIR=$(NETCDFFORTRAN_LIBDIR) ; \
 	  export HDF5_LIBDIR=$(HDF5_LIBDIR) ; \
 	  export SZ_LIBDIR=$(SZ_LIBDIR) ; \
 	  export CAIRO_LIBDIR=$(CAIRO_LIBDIR) ; \
 	  export PIXMAN_LIBDIR=$(PIXMAN_LIBDIR) ; \
+          export HARFBUZZ_LIBDIR=$(HARFBUZZ_LIBDIR) ; \
 	  export PANGO_LIBDIR=$(PANGO_LIBDIR) ; \
 	  export GLIB2_LIBDIR=$(GLIB2_LIBDIR) ; \
 	  export GFORTRAN_LIB=$(GFORTRAN_LIB) ; \
@@ -94,10 +96,12 @@
 	  export CFLAGS="$(CFLAGS) -DNDEBUG -O" ; \
 	  export BUILDTYPE=$(BUILDTYPE) ; \
 	  export NETCDF_LIBDIR=$(NETCDF_LIBDIR) ; \
+          export NETCDFFORTRAN_LIBDIR=$(NETCDFFORTRAN_LIBDIR) ; \
 	  export HDF5_LIBDIR=$(HDF5_LIBDIR) ; \
 	  export SZ_LIBDIR=$(SZ_LIBDIR) ; \
 	  export CAIRO_LIBDIR=$(CAIRO_LIBDIR) ; \
 	  export PIXMAN_LIBDIR=$(PIXMAN_LIBDIR) ; \
+	  export HARFBUZZ_LIBDIR=$(HARFBUZZ_LIBDIR) ; \
 	  export PANGO_LIBDIR=$(PANGO_LIBDIR) ; \
 	  export GLIB2_LIBDIR=$(GLIB2_LIBDIR) ; \
 	  export GFORTRAN_LIB=$(GFORTRAN_LIB) ; \
@@ -117,10 +121,12 @@
 	  export CFLAGS="$(CFLAGS) -UNDEBUG -O0 -g" ; \
 	  export BUILDTYPE=$(BUILDTYPE) ; \
 	  export NETCDF_LIBDIR=$(NETCDF_LIBDIR) ; \
+          export NETCDFFORTRAN_LIBDIR=$(NETCDFFORTRAN_LIBDIR) ; \
 	  export HDF5_LIBDIR=$(HDF5_LIBDIR) ; \
 	  export SZ_LIBDIR=$(SZ_LIBDIR) ; \
 	  export CAIRO_LIBDIR=$(CAIRO_LIBDIR) ; \
 	  export PIXMAN_LIBDIR=$(PIXMAN_LIBDIR) ; \
+          export HARFBUZZ_LIBDIR=$(HARFBUZZ_LIBDIR) ; \
 	  export PANGO_LIBDIR=$(PANGO_LIBDIR) ; \
 	  export GLIB2_LIBDIR=$(GLIB2_LIBDIR) ; \
 	  export GFORTRAN_LIB=$(GFORTRAN_LIB) ; \
@@ -137,10 +143,12 @@
 	  export CFLAGS="$(CFLAGS) -UNDEBUG -O0 -g" ; \
 	  export BUILDTYPE=$(BUILDTYPE) ; \
 	  export NETCDF_LIBDIR=$(NETCDF_LIBDIR) ; \
+          export NETCDFFORTRAN_LIBDIR=$(NETCDFFORTRAN_LIBDIR) ; \
 	  export HDF5_LIBDIR=$(HDF5_LIBDIR) ; \
 	  export SZ_LIBDIR=$(SZ_LIBDIR) ; \
 	  export CAIRO_LIBDIR=$(CAIRO_LIBDIR) ; \
 	  export PIXMAN_LIBDIR=$(PIXMAN_LIBDIR) ; \
+          export HARFBUZZ_LIBDIR=$(HARFBUZZ_LIBDIR) ; \
 	  export PANGO_LIBDIR=$(PANGO_LIBDIR) ; \
 	  export GLIB2_LIBDIR=$(GLIB2_LIBDIR) ; \
 	  export GFORTRAN_LIB=$(GFORTRAN_LIB) ; \
@@ -185,10 +193,12 @@
 	  export CFLAGS="$(CFLAGS) -O" ; \
 	  export BUILDTYPE=$(BUILDTYPE) ; \
 	  export NETCDF_LIBDIR=$(NETCDF_LIBDIR) ; \
+          export NETCDFFORTRAN_LIBDIR=$(NETCDFFORTRAN_LIBDIR) ; \
 	  export HDF5_LIBDIR=$(HDF5_LIBDIR) ; \
 	  export SZ_LIBDIR=$(SZ_LIBDIR) ; \
 	  export CAIRO_LIBDIR=$(CAIRO_LIBDIR) ; \
 	  export PIXMAN_LIBDIR=$(PIXMAN_LIBDIR) ; \
+          export HARFBUZZ_LIBDIR=$(HARFBUZZ_LIBDIR) ; \
 	  export PANGO_LIBDIR=$(PANGO_LIBDIR) ; \
 	  export GLIB2_LIBDIR=$(GLIB2_LIBDIR) ; \
 	  export GFORTRAN_LIB=$(GFORTRAN_LIB) ; \
diff -Naur PyFerret-7.6.3.orig/platform_specific.mk.x86_64-linux PyFerret-7.6.3/platform_specific.mk.x86_64-linux
--- PyFerret-7.6.3.orig/platform_specific.mk.x86_64-linux	2020-09-28 21:10:48.000000000 +0200
+++ PyFerret-7.6.3/platform_specific.mk.x86_64-linux	2020-12-17 14:36:27.694118000 +0100
@@ -17,6 +17,7 @@
 # Include directories
 #
 	NETCDF_INCLUDE	= -I$(NETCDF_LIBDIR)/../include
+	NETCDFFORTRAN_INCLUDE = -I$(NETCDFFORTRAN_LIBDIR)/../include
 
 ifeq ($(strip $(HDF5_LIBDIR)),)
 	HDF5_INCLUDE	=
@@ -36,6 +37,12 @@
 	PIXMAN_INCLUDE	= -I$(PIXMAN_LIBDIR)/../include
 endif
 
+ifeq ($(strip $(HARFBUZZ_LIBDIR)),)
+        HARFBUZZ_INCLUDE   = -I/usr/include/harfbuzz
+else
+        HARFBUZZ_INCLUDE   = -I$(HARFBUZZ_LIBDIR)/../include/harfbuzz
+endif
+
 ifeq ($(strip $(PANGO_LIBDIR)),)
 	PANGO_INCLUDE	= -I/usr/include/pango-1.0
 else
@@ -64,9 +71,11 @@
 			  -I$(DIR_PREFIX)/pyfermod \
 			  -I$(DIR_PREFIX)/external_functions/ef_utility \
 			  $(NETCDF_INCLUDE) \
+			  $(NETCDFFORTRAN_INCLUDE) \
 			  $(HDF5_INCLUDE) \
 			  $(CAIRO_INCLUDE) \
 			  $(PIXMAN_INCLUDE) \
+			  $(HARFBUZZ_INCLUDE) \
 			  $(PANGO_INCLUDE) \
 			  $(GLIB2_INCLUDE)
 
diff -Naur PyFerret-7.6.3.orig/setup.py PyFerret-7.6.3/setup.py
--- PyFerret-7.6.3.orig/setup.py	2020-09-28 21:10:48.000000000 +0200
+++ PyFerret-7.6.3/setup.py	2020-12-17 14:36:06.465376000 +0100
@@ -30,6 +30,13 @@
 if not netcdf_libdir:
     raise ValueError("Environment variable NETCDF_LIBDIR is not defined")
 
+# NETCDFFORTAN_LIBDIR must be given, either for the static library or the shared-object library
+netcdffortran_libdir = os.getenv("NETCDFFORTRAN_LIBDIR")
+if netcdffortran_libdir:
+    netcdffortran_libdir = netcdffortran_libdir.strip()
+else:
+    netcdffortran_libdir = netcdf_libdir
+
 # HDF5_LIBDIR is only given if the HDF5 and NetCDF libraries are to be statically linked
 hdf5_libdir = os.getenv("HDF5_LIBDIR")
 if hdf5_libdir:
@@ -50,6 +57,11 @@
 if pixman_libdir:
     pixman_libdir = pixman_libdir.strip()
 
+# HARFBUZZ gives a non-standard location of the harfbuzz libraries
+harfbuzz_libdir = os.getenv("HARFBUZZ_LIBDIR")
+if harfbuzz_libdir:
+    harfbuzz_libdir = harfbuzz_libdir.strip()
+
 # PANGO_LIBDIR gives a non-standard location of the pango libraries
 pango_libdir = os.getenv("PANGO_LIBDIR")
 if pango_libdir:
@@ -66,6 +78,8 @@
 
 # The list of additional directories to examine for libraries
 libdir_list = [ "lib", netcdf_libdir, ]
+if netcdffortran_libdir:
+    libdir_list.append(netcdffortran_libdir)
 if hdf5_libdir:
     libdir_list.append(hdf5_libdir)
 if sz_libdir:
@@ -74,6 +88,8 @@
     libdir_list.append(cairo_libdir)
 if pixman_libdir:
     libdir_list.append(pixman_libdir)
+if harfbuzz_libdir:
+    libdir_list.append(harfbuzz_libdir)
 if pango_libdir:
     libdir_list.append(pango_libdir)
 libdir_list.append(python_libdir)
@@ -103,7 +119,7 @@
 # The hdf5 libraries are only used to resolve netcdf library function
 # calls when statically linking in the netcdf libraries.
 if hdf5_libdir:
-    netcdff_lib = os.path.join(netcdf_libdir, "libnetcdff.a")
+    netcdff_lib = os.path.join(netcdffortran_libdir, "libnetcdff.a")
     addn_link_args.append(netcdff_lib)
     netcdf_lib = os.path.join(netcdf_libdir, "libnetcdf.a")
     addn_link_args.append(netcdf_lib)
diff -Naur PyFerret-7.6.3.orig/site_specific.mk PyFerret-7.6.3/site_specific.mk
--- PyFerret-7.6.3.orig/site_specific.mk	1970-01-01 01:00:00.000000000 +0100
+++ PyFerret-7.6.3/site_specific.mk	2020-12-17 14:41:42.140897914 +0100
@@ -0,0 +1,195 @@
+## Site-dependent definitions included in Makefiles
+
+## !!! Also verify the values in external_functions/ef_utility/site_specific.mk !!!
+
+## =========================
+## Full path name of the directory containing this file (the ferret root directory).
+## Do not use $(shell pwd) since this is included in Makefiles in other directories.
+## =========================
+# DIR_PREFIX = $(HOME)/build/pyferret_dev
+# DIR_PREFIX = $(HOME)/svn/pyferret
+DIR_PREFIX = $(FER_SRC_PREFIX)
+
+## =========================
+## Installation directory for built PyFerret.
+## Using the "install" Makefile target creates a generic pyferret-*.tar.gz file
+## and then extracts it to create a PyFerret installation at this location.
+## =========================
+# INSTALL_FER_DIR = $(HOME)/ferret_distributions/rhel6_64
+INSTALL_FER_DIR = $(FER_DIR)
+
+## =========================
+## Machine type for which to build Ferret/PyFerret
+##   x86_64-linux      for 64-bit RHEL
+##   x86_64-linux-gnu  for 64-bit Ubuntu and many "free" Linux systems
+##   i386-linux        for 32-bit RHEL
+##   i386-linux-gnu    for 32-bit Ubuntu and many "free" Linux systems
+##   intel-mac         for Mac OSX
+## =========================
+# BUILDTYPE = $(HOSTTYPE)
+BUILDTYPE = x86_64-linux
+# BUILDTYPE = x86_64-linux-gnu
+# BUILDTYPE = i386-linux
+# BUILDTYPE = i386-linux-gnu
+# BUILDTYPE = intel-mac
+
+## =========================
+## C and Fortran compilers to use.  The construct "$(shell which gcc)" assigns
+## the response to "which gcc" run from a Bourne shell (such as bash).
+## When compiling for Mac OS X, one may wish to use clang instead of gcc.
+## If you wish to use values already defined in you shell environment when 
+## you run make, comment out all definitions of CC and FC (do NOT leave blank).
+## =========================
+# CC = $(shell which clang)
+CC = $(shell which gcc)
+FC = $(shell which gfortran) -w -fallow-argument-mismatch -fallow-invalid-boz 
+
+## =========================
+## Python executable to invoke for build and install.
+## =========================
+# PYTHON_EXE = python2.6
+# PYTHON_EXE = python2.7
+# PYTHON_EXE = python3.6
+# PYTHON_EXE = python3.7
+PYTHON_EXE = python3.8
+
+## =========================
+## Full path to the python include files directory.
+## Should not need any modifications.
+## =========================
+PYTHONINCDIR := $(shell $(PYTHON_EXE) -c "from __future__ import print_function ; import distutils.sysconfig; print(distutils.sysconfig.get_python_inc())")
+
+## =========================
+## If given and not empty, the full path name to the gfortran library to use.
+## This is primarily used for the intel-mac build.
+## The given scripts (commented out) should provide the correct value for the gfortran libraries.
+## If empty or not given, the gfortran library is linked in using the "-lgfortran" flag.
+## =========================
+# GFORTRAN_LIB = $(shell $(FC) --print-file-name=libgfortran.dylib)
+# GFORTRAN_LIB = $(shell $(FC) --print-file-name=libgfortran.a)
+GFORTRAN_LIB =
+
+## =========================
+## Directory containing the Cairo static libraries (v1.12 or later).
+## Include files are assumed to be located in an "include" sibling directory.
+## If given and not empty, the Cairo static libraries found under this directory will be used.
+## If empty or not given, the system's Cairo shared libraries will be used.
+## =========================
+# CAIRO_LIBDIR = /usr/local/cairo/lib
+# CAIRO_LIBDIR = $(HOME)/.local/lib
+# CAIRO_LIBDIR = /usr/local/lib
+# CAIRO_LIBDIR = /p/software/juwels/stages/Devel-2020/software/cairo/1.17.2-GCCcore-9.3.0/lib64
+CAIRO_LIBDIR = $(EBROOTCAIRO)/lib
+
+## =========================
+## Directory containing the Pixman static libraries used by the above Cairo static libraries.
+## Include files are assumed to be located in an "include" sibling directory.
+## If given and not empty, the Pixman-1 static libraries found in this directory will be used.
+## If empty or not given, the system's Pixman-1 shared library will be used.
+## This value should be empty or not given if CAIRO_LIBDIR is empty or not given.
+## =========================
+# PIXMAN_LIBDIR = /usr/local/pixman/lib
+# PIXMAN_LIBDIR = $(HOME)/.local/lib
+# PIXMAN_LIBDIR = /usr/local/lib
+# PIXMAN_LIBDIR = /gpfs/software/juwels/stages/Devel-2020/software/pixman/0.40.0-GCCcore-9.3.0/lib
+PIXMAN_LIBDIR = $(EBROOTPIXMAN)/lib
+
+## =========================
+## Directory containing the HarfBuzz shared libraries.
+## Include files are assumed to be located in an "include" sibling directory.
+## If given and not empty, the HarfBuzz shared libraries under this directory are used.
+## If empty or not given, the system's HarfBuzz shared libraries are used.
+## This value should be empty or not given if CAIRO_LIBDIR is empty or not given.
+## =========================
+#HARFBUZZ_LIBDIR = /p/software/juwels/stages/Devel-2020/software/HarfBuzz/2.6.7-GCCcore-9.3.0/lib64
+HARFBUZZ_LIBDIR = $(EBROOTHARFBUZZ)/lib
+
+## =========================
+## Directory containing the Pango shared libraries.
+## Include files are assumed to be located in an "include" sibling directory.
+## If given and not empty, the Pango shared libraries under this directory are used.
+## If empty or not given, the system's Pango shared libraries are used.
+## This value should be empty or not given if CAIRO_LIBDIR is empty or not given.
+## =========================
+# PANGO_LIBDIR = $(HOME)/.local/lib
+# PANGO_LIBDIR = /usr/local/lib
+# PANGO_LIBDIR = /gpfs/software/juwels/stages/Devel-2020/software/Pango/1.44.7-GCCcore-9.3.0/lib
+PANGO_LIBDIR = $(EBROOTPANGO)/lib
+
+## =========================
+## Library directory containing a "glib-2.0" subdirectory with GLib-2.0 include file(s)
+## (yes, a little unusual) used by the above Pango shared libraries.
+## An "include" sibling directory containing a "glib-2.0" subdirectory with more
+## GLib-2.0 include files is assumed to exist.
+## If given and not empty, GLib-2.0 include files under this directory are used.
+## If empty or not given, the system's GLib-2.0 shared libraries are used.
+## This value should be empty or not given if PANGO_LIBDIR is empty or not given.
+## =========================
+# GLIB2_LIBDIR = $(HOME)/.local/lib
+# GLIB2_LIBDIR = /usr/local/lib
+# GLIB2_LIBDIR = /gpfs/software/juwels/stages/Devel-2020/software/GLib/2.64.4-GCCcore-9.3.0/lib
+GLIB2_LIBDIR = $(EBROOTGLIB)/lib
+
+## =========================
+## Directory containing the HDF5 static libraries.
+## Include files are assumed to be located in an "include" sibling directory.
+## If given and not empty, HDF5 and NetCDF static libraries will be used.
+## If empty or not given, NetCDF shared libraries (which specify the HDF5 and
+## compression libraries required) will be used.
+## =========================
+# HDF5_LIBDIR = /usr/local/hdf5/lib
+# HDF5_LIBDIR = $(HOME)/.local/lib
+# HDF5_LIBDIR = /usr/local/lib
+# HDF5_LIBDIR = /usr/lib64
+# HDF5_LIBDIR = /usr/lib
+# HDF5_LIBDIR = /p/software/juwels/stages/Devel-2020/software/HDF5/1.10.6-gompi-2020/lib64
+# HDF5_LIBDIR = $(EBROOTHDF5)/lib
+
+## =========================
+## Location of the SZ compression static library.
+## This value should be given only if the SZ compression library was used in
+## building the HDF5 library, and the NetCDF and HDF5 static libraries are being
+## used (HDF5_LIBDIR is given and not empty).
+## If given and not empty, the SZ compression static library is used.
+## If empty or not given, the SZ compression library will not be used
+## (which is what you want if the HDF5 libraries were built using the Z compression library).
+## =========================
+# SZ_LIBDIR = $(HOME)/.local/lib
+# SZ_LIBDIR = /usr/local/lib
+# SZ_LIBDIR = /usr/lib64
+# SZ_LIBDIR = /usr/lib
+# SZ_LIBDIR = /gpfs/software/juwels/stages/Devel-2020/software/Szip/2.1.1-GCCcore-9.3.0/lib
+SZ_LIBDIR = $(EBROOTSZIP)/lib
+
+## =========================
+## Location of the NetCDF libraries.
+## Include files are assumed to be located in an "include" sibling directory.
+## If HDF5_LIBDIR is given and not empty, the static libraries will be used
+## (along with the HDF5 static libraries).
+## If HDF5_LIBDIR is empty or not given, NetCDF shared libraries will be used.
+## =========================
+# NETCDF_LIBDIR = /usr/local/netcdf/lib
+# NETCDF_LIBDIR = $(HOME)/.local/lib
+# NETCDF_LIBDIR = /usr/local/lib
+# NETCDF_LIBDIR = /usr/lib64
+# NETCDF_LIBDIR = /usr/lib
+# NETCDF_LIBDIR = /p/software/juwels/stages/Devel-2020/software/netCDF/4.7.4-gompi-2020/lib64
+NETCDF_LIBDIR = $(EBROOTNETCDF)/lib64
+
+## =========================
+## Location of the NetCDF fortran libraries.
+## Include files are assumed to be located in an "include" sibling directory.
+## If HDF5_LIBDIR is given and not empty, the static libraries will be used
+## (along with the HDF5 static libraries).
+## If HDF5_LIBDIR is empty or not given, NetCDF fortran shared libraries will be used.
+## If empty or not given, the netcdf fortran shared libraries will be searched for in NETCDF_LIBDIR
+## =========================
+# NETCDFFORTRAN_LIBDIR = /usr/local/netcdf/lib
+# NETCDFFORTRAN_LIBDIR = $(HOME)/.local/lib
+# NETCDFFORTRAN_LIBDIR = /usr/local/lib
+# NETCDFFORTRAN_LIBDIR = /usr/lib64
+# NETCDFFORTRAN_LIBDIR = /usr/lib
+# NETCDFFORTRAN_LIBDIR = /p/software/juwels/stages/Devel-2020/software/netCDF-Fortran/4.5.3-gompi-2020/lib64
+NETCDFFORTRAN_LIBDIR = $(EBROOTNETCDFMINFORTRAN)/lib
+
+##
