# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
easyblock = 'CMakeMake'
name = 'xtb'
version = '6.6.1'

homepage = 'https://github.com/grimme-lab/xtb'
description = """The semiempirical extended tight binding code (xtb) 
is developed by the Grimme group in Bonn.
It implements the semiempirical quantum mechanical methods GFNn-xTB 
and offers a wide variety of applications.
Documentation can be found on https://xtb-docs.readthedocs.io/en/latest/

This package also includes the Conformer-Rotamer Ensemble Sampling Tool (CREST)
Documentation:  https://crest-lab.github.io/crest-docs/
and the related suite of python scripts implementing
Commandline Energetic Sorting of Conformer-Rotamer Ensembles (CENSO)
Documentation: https://xtb-docs.readthedocs.io/en/latest/CENSO_docs/censo.html

"""

toolchain = {'name': 'intel-compilers', 'version': '2023.2.1'}
# xtb assumes OpenMP/tblite (xtb/cmake/CMakeLists.txt) 
toolchainopts = {'r8': True, 'openmp': True}


source_urls = [
    'https://github.com',
]

dependencies = [
    ('CMake', '3.26.3', ''),
    ('Python', '3.11.3', ''),
    ('imkl', '2023.2.0', '', SYSTEM),
]

#
#  git still loads https://github.com/fortran-lang/test-drive/archive/refs/tags/v0.4.0.tar.gz 
#  loads test-drive at two places, which should not point to the same dirs
#  crest is a fortran code requiring xtb or orca or turbomole but will not install within one ebconfig together with xtb
#  censo is a collection of python scripts, that can be bundled into an executable via pyinstaller 
# ====================================================================
# CREST - # Conformer-Rotamer Ensemble Sampling Tool
# CENSO - Commandline ENergetic SOrting of Conformer Rotamer Ensembles
# ====================================================================
# censo requires (another) tool: cefine https://github.com/grimme-lab/cefine/releases
# https://github.com/grimme-lab/CENSO/releases/download/v.1.2.0/censo
# censo is a python bundle and could be installed by the generic bundle easyblock
# however, censo is specific to this package, so it would be convenient to just
# execute the respective calls for bundle here


sources = [
    {'download_filename': 'grimme-lab/xtb/archive/refs/tags/v%(version)s.tar.gz',
     'filename': 'xtb-%(version)s.tar.gz'},
    {'download_filename': 'grimme-lab/mctc-lib/archive/refs/tags/v0.3.1.tar.gz',
     'filename': 'mctc-lib-0.3.1.tar.gz'},
    {'download_filename': 'tblite/tblite/archive/refs/tags/v0.3.0.tar.gz',
     'filename': 'tblite-0.3.0.tar.gz'},
    {'download_filename': 'grimme-lab/mstore/archive/refs/tags/v0.2.0.tar.gz',
     'filename': 'mstore-0.2.0.tar.gz'},
    {'download_filename': 'grimme-lab/multicharge/archive/refs/tags/v0.2.0.tar.gz',
     'filename': 'multicharge-0.2.0.tar.gz'},
    {'download_filename': 'toml-f/toml-f/archive/refs/tags/v0.3.0.tar.gz',
     'filename': 'toml-f-0.3.0.tar.gz'},
    {'download_filename': 'awvwgk/simple-dftd3/archive/refs/tags/v0.6.0.tar.gz',
     'filename': 'simple-dftd3-0.6.0.tar.gz'},
    {'download_filename': 'dftd4/dftd4/archive/refs/tags/v3.4.0.tar.gz',
     'filename': 'dftd4-3.4.0.tar.gz'},
    {'download_filename': 'crest-lab/crest/archive/refs/tags/v2.12.tar.gz',
     'filename': 'crest-2.12.tar.gz'},
    {'download_filename': 'grimme-lab/cefine/archive/refs/tags/v2.24.tar.gz',
     'filename': 'cefine-2.24.0.tar.gz'},
    {'download_filename': 'fortran-lang/test-drive/archive/refs/tags/v0.4.0.tar.gz',
     'filename': 'test-drive-0.4.0.tar.gz'},
    {'download_filename': 'fortran-lang/test-drive/archive/refs/tags/v0.3.0.tar.gz',
     'filename': 'test-drive-0.3.0.tar.gz'},
]

patches = [
    'xtb_crest2.patch',
    'xtb_compileroptions.patch',
]


checksums = [
    'df9a9fbcbf685a94ba6e1a97a6fe6a8530227ea380a1507cb758e72907542dfe',
    '03dc8ccba37413da70e55a07cef8e8de53bce33f5bb52c1f8db5fec326abe083',
    '44b6ecff94b29c109f7d1afa3f49eebd3979a2b115fc7bab0c9fc1d7e61bdc27',
    '95edba88afbc8013f57f4c818a97c0500cc40b158bed11234c061b2b6d7e480d',
    '953e2ace2f4035b1fa8ecf680f90b5ce6ad5caae17c8d8ccbc2578b92b69d3e7',
    'dff1bf3466ff346d2dee24440d1a4728e71051fe34d5c282b6ce7e6dc3ce0de9',
    '4bef311f8e5a2c32141eddeea65615c3c8480f917cd884488ede059fb0962a50',
    'f3b0a16a952817ae48e819626e13676fba3b61c8beea47b0f8ada2fbb679fb7b',
    '390f0ac0aedafbd6bb75974fcffefe7e0232ad6c4ea0ab4f1a77e656a3ce263d',
    'cbbd09f4d3479c5340b5608ca559795882fd9e10a9dc3bed23beff657b34021b',
    'f9c037a3c1727e98801c2375e6f2efde9881ac1f54b04be3bc928e094f5787a5',
    'ae54b9e63dce723a3ac3ef32a637ed24119cb344b34792a90d3e9ec7440b6174',
    'f3adb18892bca4ed7039a474dc9f02e697f9a08500ee5ae63fe7c6aa689f3c9b',
    'c4fea901e0287a6620e27fd1e2acf2d27ebe58a4dc6db4ec29dec49861b66864',
]

local_l1 = "pwd && pushd ../xtb-6.6.1/subprojects && cp -r ../../crest-2.12 crest && "
local_l1 += "cp -r ../../mctc-lib-0.3.1 mctc-lib "
local_l1 += "&& cp -r ../../tblite-0.3.0 tblite && cp -r ../../mstore-0.2.0 mstore && "
local_l1 += "cp -r ../../multicharge-0.2.0 multicharge && cp -r  ../../toml-f-0.3.0 toml-f && "
local_l1 += "cp -r ../../simple-dftd3-0.6.0 s-dftd3 && cp -r  ../../dftd4-3.4.0 dftd4 &&  pushd tblite/subprojects && "
local_l1 += "ln -s ../../dftd4 dftd4 && ln -s ../../mctc-lib mctc-lib && ln -s ../../mstore mstore && "
local_l1 += "ln -s ../../multicharge multicharge && ln -s ../../s-dftd3 s-dftd3 &&  ln -s ../../toml-f toml-f && "
local_l1 += "popd && pushd dftd4/subprojects && ln -s ../../multicharge multicharge && popd && popd && pwd && "

preconfigopts = [
    local_l1,
]

#  use --trace-expand to get detailed listings of CMake operations

# for some reason CMake does not incorporate the easybuild fortran flags but rather messes on its own
# build_type = 'Release' just produces too high optimization flags

build_type = 'RelWithDebInfo'

# adding -DTEST_DRIVE-FIND_METHOD=subproject  would use the downloaded test-drive versions
# however, the mechanism breaks if one submodule uses test-drive-0.3.0 and another requires test-drive-0.4.0
# I'd recommend to use deeper trees of subprojects - it is just not messy enough

local_l2 = "-DCMAKE_DIALECT='-traceback' "
local_l2 += "-DMCTCLIB_FIND_METHOD=subproject -DTBLITE_FIND_METHOD=subproject -DMSTORE_FIND_METHOD=subproject "
local_l2 += "-DMULTICHARGE_FIND_METHOD=subproject -DTOMLF_FIND_METHOD=subproject -DSDFTD3_FIND_METHOD=subproject "
local_l2 += "-DDFTD4_FIND_METHOD=subproject -DCREST_FIND_METHOD=subproject "

configopts = [
    local_l2,
]


local_l3 = 'pwd && pushd ../cefine-2.24 && $FC -o cefine cefine.f90 && popd && pushd .. &&'
local_l3 += ' wget https://github.com/grimme-lab/CENSO/releases/download/v.1.2.0/censo &&'
local_l3 += '  chmod u+rx censo && popd &&'

preinstallopts = local_l3

# one test fails (surface area values do not match) - possibly threshold too tight
# runtest = ' MKL_NUM_THREADS=4 OMP_NUM_THREADS=4 test '


postinstallcmds = [
    'cp %(builddir)s/cefine-2.24/cefine  %(installdir)s/bin',
    'cp %(builddir)s/censo %(installdir)s/bin',
]

sanity_check_paths = {
    'files': ['bin/xtb', 'bin/dftd4', 'bin/mctc-convert', 'bin/mstore-fortranize',
              'bin/mstore-info', 'bin/multicharge', 'bin/s-dftd3', 'bin/tblite', 'bin/crest',
              'bin/cefine', 'bin/censo'],
    'dirs': ['bin', 'lib64', 'include', 'share/xtb'],
}

modloadmsg = 'xtb \n'

moduleclass = 'chem'
