diff -ruN mesa-19.0.1.orig/src/gallium/drivers/swr/rasterizer/jitter/gen_builder.hpp mesa-19.0.1/src/gallium/drivers/swr/rasterizer/jitter/gen_builder.hpp
--- mesa-19.0.1.orig/src/gallium/drivers/swr/rasterizer/jitter/gen_builder.hpp	2019-03-27 18:05:37.000000000 +0100
+++ mesa-19.0.1/src/gallium/drivers/swr/rasterizer/jitter/gen_builder.hpp	2019-04-05 13:53:08.827715826 +0200
@@ -27,12 +27,14 @@
 // DO NOT EDIT
 //
 // Generation Command Line:
-//  ./rasterizer/codegen/gen_llvm_ir_macros.py
+//  ../mesa-19.0.1/src/gallium/drivers/swr/rasterizer/codegen/gen_llvm_ir_macros.py
 //    --input
-//    /usr/include/llvm/IR/IRBuilder.h
+//    /gpfs/software/juwels/stages/2019a/software/LLVM/8.0.0-GCCcore-8.3.0/include/llvm/IR/IRBuilder.h
 //    --output
-//    rasterizer/jitter
+//    src/gallium/drivers/swr/rasterizer/jitter/gen_builder.hpp
 //    --gen_h
+//    --output-dir
+//    src/gallium/drivers/swr/rasterizer/jitter
 //
 //============================================================================
 // clang-format off
@@ -226,19 +228,19 @@
     return IRB()->CreateGCRelocate(Statepoint, BaseOffset, DerivedOffset, ResultType, Name);
 }
 
-CallInst* BINARY_INTRINSIC(Intrinsic::ID ID, Value *LHS, Value *RHS, const Twine &Name = "")
+CallInst* UNARY_INTRINSIC(Intrinsic::ID ID, Value *V, Instruction *FMFSource = nullptr, const Twine &Name = "")
 {
-    return IRB()->CreateBinaryIntrinsic(ID, LHS, RHS, Name);
+    return IRB()->CreateUnaryIntrinsic(ID, V, FMFSource, Name);
 }
 
-CallInst* INTRINSIC(Intrinsic::ID ID, Instruction *FMFSource = nullptr, const Twine &Name = "")
+CallInst* BINARY_INTRINSIC(Intrinsic::ID ID, Value *LHS, Value *RHS, Instruction *FMFSource = nullptr, const Twine &Name = "")
 {
-    return IRB()->CreateIntrinsic(ID, FMFSource, Name);
+    return IRB()->CreateBinaryIntrinsic(ID, LHS, RHS, FMFSource, Name);
 }
 
-CallInst* INTRINSIC(Intrinsic::ID ID, ArrayRef<Value *> Args, Instruction *FMFSource = nullptr, const Twine &Name = "")
+CallInst* INTRINSIC(Intrinsic::ID ID, ArrayRef<Type *> Types, ArrayRef<Value *> Args, Instruction *FMFSource = nullptr, const Twine &Name = "")
 {
-    return IRB()->CreateIntrinsic(ID, Args, FMFSource, Name);
+    return IRB()->CreateIntrinsic(ID, Types, Args, FMFSource, Name);
 }
 
 CallInst* MIN_NUM(Value *LHS, Value *RHS, const Twine &Name = "")
@@ -251,6 +253,16 @@
     return IRB()->CreateMaxNum(LHS, RHS, Name);
 }
 
+CallInst* MINIMUM(Value *LHS, Value *RHS, const Twine &Name = "")
+{
+    return IRB()->CreateMinimum(LHS, RHS, Name);
+}
+
+CallInst* MAXIMUM(Value *LHS, Value *RHS, const Twine &Name = "")
+{
+    return IRB()->CreateMaximum(LHS, RHS, Name);
+}
+
 ReturnInst* RET_VOID()
 {
     return IRB()->CreateRetVoid();
@@ -291,7 +303,22 @@
     return IRB()->CreateIndirectBr(Addr, NumDests);
 }
 
-InvokeInst* INVOKE(Value *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> Args = None, const Twine &Name = "")
+InvokeInst* INVOKE(FunctionType *Ty, Value *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> Args, ArrayRef<OperandBundleDef> OpBundles, const Twine &Name = "")
+{
+    return IRB()->CreateInvoke(Ty, Callee, NormalDest, UnwindDest, Args, OpBundles, Name);
+}
+
+InvokeInst* INVOKE(FunctionType *Ty, Value *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> Args = None, const Twine &Name = "")
+{
+    return IRB()->CreateInvoke(Ty, Callee, NormalDest, UnwindDest, Args, Name);
+}
+
+InvokeInst* INVOKE(Function *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> Args, ArrayRef<OperandBundleDef> OpBundles, const Twine &Name = "")
+{
+    return IRB()->CreateInvoke(Callee, NormalDest, UnwindDest, Args, OpBundles, Name);
+}
+
+InvokeInst* INVOKE(Function *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> Args = None, const Twine &Name = "")
 {
     return IRB()->CreateInvoke(Callee, NormalDest, UnwindDest, Args, Name);
 }
@@ -301,6 +328,11 @@
     return IRB()->CreateInvoke(Callee, NormalDest, UnwindDest, Args, OpBundles, Name);
 }
 
+InvokeInst* INVOKE(Value *Callee, BasicBlock *NormalDest, BasicBlock *UnwindDest, ArrayRef<Value *> Args = None, const Twine &Name = "")
+{
+    return IRB()->CreateInvoke(Callee, NormalDest, UnwindDest, Args, Name);
+}
+
 ResumeInst* RESUME(Value *Exn)
 {
     return IRB()->CreateResume(Exn);
@@ -596,6 +628,21 @@
     return IRB()->CreateStore(Val, Ptr, isVolatile);
 }
 
+LoadInst* ALIGNED_LOAD(Type *Ty, Value *Ptr, unsigned Align, const char *Name)
+{
+    return IRB()->CreateAlignedLoad(Ty, Ptr, Align, Name);
+}
+
+LoadInst* ALIGNED_LOAD(Type *Ty, Value *Ptr, unsigned Align, const Twine &Name = "")
+{
+    return IRB()->CreateAlignedLoad(Ty, Ptr, Align, Name);
+}
+
+LoadInst* ALIGNED_LOAD(Type *Ty, Value *Ptr, unsigned Align, bool isVolatile, const Twine &Name = "")
+{
+    return IRB()->CreateAlignedLoad(Ty, Ptr, Align, isVolatile, Name);
+}
+
 LoadInst* ALIGNED_LOAD(Value *Ptr, unsigned Align, const char *Name)
 {
     return IRB()->CreateAlignedLoad(Ptr, Align, Name);
@@ -656,21 +703,41 @@
     return IRB()->CreateConstInBoundsGEP2_32(Ty, Ptr, Idx0, Idx1, Name);
 }
 
+Value* CONST_GEP1_64(Type *Ty, Value *Ptr, uint64_t Idx0, const Twine &Name = "")
+{
+    return IRB()->CreateConstGEP1_64(Ty, Ptr, Idx0, Name);
+}
+
 Value* CONST_GEP1_64(Value *Ptr, uint64_t Idx0, const Twine &Name = "")
 {
     return IRB()->CreateConstGEP1_64(Ptr, Idx0, Name);
 }
 
+Value* CONST_IN_BOUNDS_GEP1_64(Type *Ty, Value *Ptr, uint64_t Idx0, const Twine &Name = "")
+{
+    return IRB()->CreateConstInBoundsGEP1_64(Ty, Ptr, Idx0, Name);
+}
+
 Value* CONST_IN_BOUNDS_GEP1_64(Value *Ptr, uint64_t Idx0, const Twine &Name = "")
 {
     return IRB()->CreateConstInBoundsGEP1_64(Ptr, Idx0, Name);
 }
 
+Value* CONST_GEP2_64(Type *Ty, Value *Ptr, uint64_t Idx0, uint64_t Idx1, const Twine &Name = "")
+{
+    return IRB()->CreateConstGEP2_64(Ty, Ptr, Idx0, Idx1, Name);
+}
+
 Value* CONST_GEP2_64(Value *Ptr, uint64_t Idx0, uint64_t Idx1, const Twine &Name = "")
 {
     return IRB()->CreateConstGEP2_64(Ptr, Idx0, Idx1, Name);
 }
 
+Value* CONST_IN_BOUNDS_GEP2_64(Type *Ty, Value *Ptr, uint64_t Idx0, uint64_t Idx1, const Twine &Name = "")
+{
+    return IRB()->CreateConstInBoundsGEP2_64(Ty, Ptr, Idx0, Idx1, Name);
+}
+
 Value* CONST_IN_BOUNDS_GEP2_64(Value *Ptr, uint64_t Idx0, uint64_t Idx1, const Twine &Name = "")
 {
     return IRB()->CreateConstInBoundsGEP2_64(Ptr, Idx0, Idx1, Name);
@@ -946,26 +1013,36 @@
     return IRB()->CreatePHI(Ty, NumReservedValues, Name);
 }
 
-CallInst* CALLA(Value *Callee, ArrayRef<Value *> Args = None, const Twine &Name = "", MDNode *FPMathTag = nullptr)
+CallInst* CALLA(FunctionType *FTy, Value *Callee, ArrayRef<Value *> Args = None, const Twine &Name = "", MDNode *FPMathTag = nullptr)
 {
-    return IRB()->CreateCall(Callee, Args, Name, FPMathTag);
+    return IRB()->CreateCall(FTy, Callee, Args, Name, FPMathTag);
 }
 
-CallInst* CALLA(FunctionType *FTy, Value *Callee, ArrayRef<Value *> Args, const Twine &Name = "", MDNode *FPMathTag = nullptr)
+CallInst* CALLA(FunctionType *FTy, Value *Callee, ArrayRef<Value *> Args, ArrayRef<OperandBundleDef> OpBundles, const Twine &Name = "", MDNode *FPMathTag = nullptr)
 {
-    return IRB()->CreateCall(FTy, Callee, Args, Name, FPMathTag);
+    return IRB()->CreateCall(FTy, Callee, Args, OpBundles, Name, FPMathTag);
 }
 
-CallInst* CALLA(Value *Callee, ArrayRef<Value *> Args, ArrayRef<OperandBundleDef> OpBundles, const Twine &Name = "", MDNode *FPMathTag = nullptr)
+CallInst* CALLA(Function *Callee, ArrayRef<Value *> Args = None, const Twine &Name = "", MDNode *FPMathTag = nullptr)
+{
+    return IRB()->CreateCall(Callee, Args, Name, FPMathTag);
+}
+
+CallInst* CALLA(Function *Callee, ArrayRef<Value *> Args, ArrayRef<OperandBundleDef> OpBundles, const Twine &Name = "", MDNode *FPMathTag = nullptr)
 {
     return IRB()->CreateCall(Callee, Args, OpBundles, Name, FPMathTag);
 }
 
-CallInst* CALLA(Function *Callee, ArrayRef<Value *> Args, const Twine &Name = "", MDNode *FPMathTag = nullptr)
+CallInst* CALLA(Value *Callee, ArrayRef<Value *> Args = None, const Twine &Name = "", MDNode *FPMathTag = nullptr)
 {
     return IRB()->CreateCall(Callee, Args, Name, FPMathTag);
 }
 
+CallInst* CALLA(Value *Callee, ArrayRef<Value *> Args, ArrayRef<OperandBundleDef> OpBundles, const Twine &Name = "", MDNode *FPMathTag = nullptr)
+{
+    return IRB()->CreateCall(Callee, Args, OpBundles, Name, FPMathTag);
+}
+
 Value* SELECT(Value *C, Value *True, Value *False, const Twine &Name = "", Instruction *MDFrom = nullptr)
 {
     return IRB()->CreateSelect(C, True, False, Name, MDFrom);
@@ -1056,14 +1133,14 @@
     return IRB()->CreateExtractInteger(DL, From, ExtractedTy, Offset, Name);
 }
 
-CallInst* ALIGNMENT_ASSUMPTION(const DataLayout &DL, Value *PtrValue, unsigned Alignment, Value *OffsetValue = nullptr)
+CallInst* ALIGNMENT_ASSUMPTION(const DataLayout &DL, Value *PtrValue, unsigned Alignment, Value *OffsetValue = nullptr, Value **TheCheck = nullptr)
 {
-    return IRB()->CreateAlignmentAssumption(DL, PtrValue, Alignment, OffsetValue);
+    return IRB()->CreateAlignmentAssumption(DL, PtrValue, Alignment, OffsetValue, TheCheck);
 }
 
-CallInst* ALIGNMENT_ASSUMPTION(const DataLayout &DL, Value *PtrValue, Value *Alignment, Value *OffsetValue = nullptr)
+CallInst* ALIGNMENT_ASSUMPTION(const DataLayout &DL, Value *PtrValue, Value *Alignment, Value *OffsetValue = nullptr, Value **TheCheck = nullptr)
 {
-    return IRB()->CreateAlignmentAssumption(DL, PtrValue, Alignment, OffsetValue);
+    return IRB()->CreateAlignmentAssumption(DL, PtrValue, Alignment, OffsetValue, TheCheck);
 }
 
     // clang-format on
