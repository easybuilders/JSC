# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
##
# This file is an EasyBuild reciPY as per https://github.com/hpcugent/easybuild
#
# Authors::  Inge Gutheil <i.gutheil@fz-juelich.de>
# $Id$
#
# This work implements the ELPA library
# http://elpa.rzg.mpg.de
##
easyblock = 'ConfigureMake'

name = 'ELPA'
version = '2015.11.001'
versionsuffix = '-hybrid'

homepage = 'http://elpa.rzg.mpg.de'
description = """Eigenvalue SoLvers for Petaflop-Applications.
ELPA has been installed as module in
$EBROOTELPA
It is the hybrid MPI with OpenMP installation.
Several assembly kernels have been compiled.
They can be chosen at runtime when calling the library or 
with the environment variables REAL_ELPA_KERNEL or COMPLEX_ELPA_KERNEL.
An example is
export REAL_ELPA_KERNEL=REAL_ELPA_KERNEL_GENERIC 
which chooses the generic real kernel for elpa2.
You can get an overview over the available kernels by 
loading elpa and then submitting a batch job with
srun --ntasks=1 $EBROOTELPA/bin/elpa2_print_kernels_openmp
The result is written to stderr, so do not throw away stderr.
Programs using the ELPA library have to be compiled with
-I$ELPA_INCLUDE/ -I$ELPA_INCLUDE/elpa -I$ELPA_MODULES and linked with
-L$EBROOTELPA/lib -lelpa_openmp
-lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64 -lmkl_intel_lp64 
-lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lstdc++
Examples can be found in $EBROOTELPA/examples,
but they cannot be made because they need threaded MPI. 
You can use the hybrid ELPA version with none-threaded MPI, 
it is only a problem of the examples!
"""

toolchain = {'version': '2016a', 'name': 'intel-para'}
toolchainopts = {'optarch': True, 'usempi': True, 'openmp': True}

sources = [SOURCELOWER_TAR_GZ]

patches = ['elpa_examples_hybrid.patch']

#start_dir = '%s_%s' % (name, version)
builddependencies = [
    ('Automake', '1.15'),
]

#export BLACS_LIB = [mkl_blacs_intelmpi_lp64]
configopts = '--enable-openmp FCFLAGS="-qopenmp -I$EBROOTIMKL/mkl/include/intel64/lp64 $FCFLAGS" LIBS="$LIBSCALAPACK"'

buildopts = ' V=1 LIBS="$LIBSCALAPACK"'  # FCFLAGS="-I$EBROOTIMKL/mkl/include/intel64/lp64 $FCFLAGS" LIBS="$LIBBLAS"'

modextravars = {
    'ELPAROOT': '%(installdir)s',
    'ELPA_INCLUDE': '%(installdir)s/include/elpa_openmp-%(version)s/',
    'ELPA_LIB': '%(installdir)s/lib',
    'ELPA_MODULES': '%(installdir)s/include/elpa_openmp-%(version)s/modules',
    'ELPA_ROOT': '%(installdir)s',
}
postinstallcmds = [
    "cp %(builddir)s/%(namelower)s-%(version)s/config-f90.h %(installdir)s/include/elpa_openmp-%(version)s/%(namelower)s",
    "ar crv %(installdir)s/lib/libelpa_tests.a %(builddir)s/%(namelower)s-%(version)s/test/shared_sources/blacs_infrastructure.o %(builddir)s/%(namelower)s-%(version)s/test/shared_sources/check_correctnes.o %(builddir)s/%(namelower)s-%(version)s/test/shared_sources/prepare_matrix.o %(builddir)s/%(namelower)s-%(version)s/test/shared_sources/read_input_parameters.o %(builddir)s/%(namelower)s-%(version)s/test/shared_sources/setup_mpi.o %(builddir)s/%(namelower)s-%(version)s/test/shared_sources/util.o",
    "cp -r %(builddir)s/%(namelower)s-%(version)s/test %(installdir)s/examples",
    "rm %(installdir)s/examples/shared_sources/*.o",
    "rm %(installdir)s/examples/c_test_programs/*.o",
    "rm %(installdir)s/examples/fortran_test_programs/*.o",
    "rm %(installdir)s/examples/c_test_programs/Makefile_examples.orig",
    "rm %(installdir)s/examples/fortran_test_programs/Makefile_examples.orig",
    "rm %(installdir)s/examples/fortran_test_programs/read_real.F90",
]
start_dir = '%(builddir)s/%(namelower)s-%(version)s/'

moduleclass = 'math'
