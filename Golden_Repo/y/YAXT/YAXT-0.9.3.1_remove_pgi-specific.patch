Comment out dedicated PGI-code, as NVHPC does not support several intrinsics in the initialization phase.
Author: s.griessbach@fz-juelich.de
--- yaxt-0.9.3.1/tests/ftest_common.f90.orig	2023-02-14 17:04:33.099320000 +0100
+++ yaxt-0.9.3.1/tests/ftest_common.f90	2023-02-14 17:03:57.795024000 +0100
@@ -1,3 +1,4 @@
+
 !>
 !! @file ftest_common.f90
 !!
@@ -1214,21 +1215,21 @@
     ! double precision real and gfortran warns about that. For that
     ! reason the below expression limits scale_val to those 1-bits
     ! which can be represented in a double precision constant
-#if ! defined __PGI || __PGIC__ > 21
-    INTEGER(i8), PARAMETER :: scale_val &
-         = IAND(HUGE(a), NOT(ISHFT(1_i8, BIT_SIZE(1_i8) &
-         &                               - DIGITS(0.0_c_double))  - 1 ) )
-#else
+    !#if defined __PGI || __PGIC__ > 21
+    !    INTEGER(i8), PARAMETER :: scale_val &
+    !         = IAND(HUGE(a), NOT(ISHFT(1_i8, BIT_SIZE(1_i8) &
+    !         &                               - DIGITS(0.0_c_double))  - 1 ) )
+    !#else
     INTEGER(i8) :: scale_val
-#endif
+    !#endif
     REAL(c_double) :: rand_nums(block_len), sc
     n = SIZE(a)
     nb = n/block_len
-#if defined __PGI && __PGIC__ <= 21
-    scale_val &
-         = IAND(HUGE(a), NOT(ISHFT(1_i8, BIT_SIZE(1_i8) &
-         &                               - DIGITS(0.0_c_double))  - 1 ) )
-#endif
+    !#if defined __PGI && __PGIC__ <= 21
+    !    scale_val &
+    !         = IAND(HUGE(a), NOT(ISHFT(1_i8, BIT_SIZE(1_i8) &
+    !         &                               - DIGITS(0.0_c_double))  - 1 ) )
+    !#endif
 
     sc = REAL(scale_val, c_double)
     DO j = 1, nb
