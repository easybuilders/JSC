# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
name = 'Julia'
version = '1.6.1'

homepage = 'https://julialang.org/'
description = """Julia was designed from the beginning for high performance.
Julia programs compile to efficient native code for multiple platforms via LLVM
"""


toolchain = {'name': 'gcccoremkl', 'version': '9.3.0-2020.2.254'}
toolchainopts = {'pic': True, 'verbose': True}  # , 'usempi': True}

source_urls = ['https://github.com/JuliaLang/julia/releases/download/v%(version)s/']
sources = ['julia-%(version)s-full.tar.gz']

builddependencies = [
    ('binutils', '2.34'),
    ('git', '2.28.0'),
    ('CMake', '3.18.0'),
]

dependencies = [
    ('Python', '3.8.5'),
    ('GMP', '6.2.0'),
    ('CUDA', '11.0', '', SYSTEM),
    ('SciPy-Stack', '2020', '-Python-%(pyver)s'),
    ('OpenGL', '2020'),
]

osdependencies = [('openssl')]

skipsteps = ['configure']
buildopts = " USE_SYSTEM_GMP=1 USE_INTEL_MKL=1 "
installopts = "prefix=%(installdir)s "

arch_name = 'gpu'

exts_defaultclass = 'JuliaPackage'
exts_list = [
    # General Purpose
    ('PackageCompiler.jl', '1.2.5', {
        'source_tmpl': 'v1.2.5.tar.gz',
        'source_urls': ['https://github.com/JuliaLang/PackageCompiler.jl/archive/'],
        # 'packagespec': 'name="PackageCompiler", version="1.2.5"',
    }),
    ('HTTP.jl', '0.9.5', {
        'source_tmpl': 'v0.9.5.tar.gz',
        'source_urls': ['https://github.com/JuliaWeb/HTTP.jl/archive/'],
    }),
    ('Parsers.jl', '1.1.0', {
        'source_tmpl': 'v1.1.0.tar.gz',
        'source_urls': ['https://github.com/JuliaData/Parsers.jl/archive/'],
    }),
    ('VersionParsing.jl', '1.2.0', {
        'source_tmpl': 'v1.2.0.tar.gz',
        'source_urls': ['https://github.com/JuliaInterop/VersionParsing.jl/archive/'],
    }),
    ('JSON.jl', '0.21.1', {
        'source_tmpl': 'v0.21.1.tar.gz',
        'source_urls': ['https://github.com/JuliaIO/JSON.jl/archive/'],
    }),
    ('WebIO.jl', '0.8.15', {
        'source_tmpl': 'v0.8.15.tar.gz',
        'source_urls': ['https://github.com/JuliaGizmos/WebIO.jl/archive/'],
    }),
    ('ProgressMeter.jl', '1.5.0', {
        'source_tmpl': 'v1.5.0.tar.gz',
        'source_urls': ['https://github.com/timholy/ProgressMeter.jl/archive/'],
    }),
    ('Conda.jl', '1.5.2', {
        'source_tmpl': 'v1.5.2.tar.gz',
        'source_urls': ['https://github.com/JuliaPy/Conda.jl/archive/'],
    }),
    ('PyCall.jl', '1.92.3', {
        'source_tmpl': 'v1.92.3.tar.gz',
        'source_urls': ['https://github.com/JuliaPy/PyCall.jl/archive/'],
    }),
    ('LaTeXStrings.jl', '1.2.1', {
        'source_tmpl': 'v1.2.1.tar.gz',
        'source_urls': ['https://github.com/stevengj/LaTeXStrings.jl/archive/'],
    }),
    ('DocumentFormat.jl', '3.2.0', {
        'source_tmpl': 'v3.2.0.tar.gz',
        'source_urls': ['https://github.com/julia-vscode/DocumentFormat.jl/archive/'],
    }),
    # Data Science
    ('CSV.jl', '0.8.4', {
        'source_tmpl': 'v0.8.4.tar.gz',
        'source_urls': ['https://github.com/JuliaData/CSV.jl/archive/'],
    }),
    ('DataFrames.jl', '0.21.8', {
        'source_tmpl': 'v0.21.8.tar.gz',
        'source_urls': ['https://github.com/JuliaData/DataFrames.jl/archive/'],
    }),
    ('Arrow.jl', '1.4.1', {
        'source_tmpl': 'v1.4.1.tar.gz',
        'source_urls': ['https://github.com/JuliaData/Arrow.jl/archive/'],
    }),
    ('OnlineStats.jl', '1.5.8', {
        'source_tmpl': 'v1.5.8.tar.gz',
        'source_urls': ['https://github.com/joshday/OnlineStats.jl/archive/'],
    }),
    ('Query.jl', '1.0.0', {
        'source_tmpl': 'v1.0.0.tar.gz',
        'source_urls': ['https://github.com/queryverse/Query.jl/archive/'],
    }),
    # Scientific Domains
    ('GSL.jl', '1.0.1', {
        'source_tmpl': 'v1.0.1.tar.gz',
        'source_urls': ['https://github.com/JuliaMath/GSL.jl/archive/refs/tags/'],
    }),
    ('DifferentialEquations.jl', '6.16.0', {
        'source_tmpl': 'v6.16.0.tar.gz',
        'source_urls': ['https://github.com/SciML/DifferentialEquations.jl/archive/'],
    }),
    ('Distributions.jl', '0.24.18', {
        'source_tmpl': 'v0.24.18.tar.gz',
        'source_urls': ['https://github.com/JuliaStats/Distributions.jl/archive/'],
    }),
    ('Optim.jl', '1.3.0', {
        'source_tmpl': 'v1.3.0.tar.gz',
        'source_urls': ['https://github.com/JuliaNLSolvers/Optim.jl/archive/'],
    }),
    ('IterativeSolvers.jl', '0.9.0', {
        'source_tmpl': 'v0.9.0.tar.gz',
        'source_urls': ['https://github.com/JuliaLinearAlgebra/IterativeSolvers.jl/archive/'],
    }),
    ('AbstractFFTs.jl', '1.0.1', {
        'source_tmpl': 'v1.0.1.tar.gz',
        'source_urls': ['https://github.com/JuliaMath/AbstractFFTs.jl/archive/'],
    }),
    ('OrdinaryDiffEq.jl', '5.52.7', {
        'source_tmpl': 'v5.52.7.tar.gz',
        'source_urls': ['https://github.com/SciML/OrdinaryDiffEq.jl/archive/'],
    }),
    ('SpecialFunctions.jl', '1.3.0', {
        'source_tmpl': 'v1.3.0.tar.gz',
        'source_urls': ['https://github.com/JuliaMath/SpecialFunctions.jl/archive/'],
    }),
    ('JuMP.jl', '0.21.7', {
        'source_tmpl': 'v0.21.7.tar.gz',
        'source_urls': ['https://github.com/jump-dev/JuMP.jl/archive/'],
    }),
    # Visualization
    ('GR.jl', '0.57.4', {
        'source_tmpl': 'v0.57.4.tar.gz',
        'source_urls': ['https://github.com/jheinen/GR.jl/archive/'],
    }),
    ('PlotlyJS.jl', '0.14.1', {
        'source_tmpl': 'v0.14.1.tar.gz',
        'source_urls': ['https://github.com/JuliaPlots/PlotlyJS.jl/archive/'],
    }),
    ('PyPlot.jl', '2.9.0', {
        'source_tmpl': 'v2.9.0.tar.gz',
        'source_urls': ['https://github.com/JuliaPy/PyPlot.jl/archive/'],
    }),
    ('Plots.jl', '1.12.0', {
        'source_tmpl': 'v1.12.0.tar.gz',
        'source_urls': ['https://github.com/JuliaPlots/Plots.jl/archive/'],
    }),
    ('UnicodePlots.jl', '1.3.0', {
        'source_tmpl': 'v1.3.0.tar.gz',
        'source_urls': ['https://github.com/Evizero/UnicodePlots.jl/archive/'],
    }),
    ('StatsPlots.jl', '0.14.19', {
        'source_tmpl': 'v0.14.19.tar.gz',
        'source_urls': ['https://github.com/JuliaPlots/StatsPlots.jl/archive/'],
    }),
    # CUDA
    ('CUDA.jl', '3.1.0', {
        'source_tmpl': 'v3.1.0.tar.gz',
        'source_urls': ['https://github.com/JuliaGPU/CUDA.jl/archive/']
    }),
]

modextravars = {
    'JULIA_CUDA_USE_BINARYBUILDER': 'false',
}

sanity_check_paths = {
    'files': ['bin/julia', 'include/julia/julia.h', 'lib/libjulia.so'],
    'dirs': ['bin', 'etc', 'include', 'lib', 'share']
}

moduleclass = 'lang'
