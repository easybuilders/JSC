diff -Naur ParaView-v5.7.0/Wrapping/Python/paraview/simple.py ParaView-v5.7.0-changed/Wrapping/Python/paraview/simple.py
--- ParaView-v5.7.0.orig/Wrapping/Python/paraview/simple.py	2019-09-26 23:10:51.000000000 +0200
+++ ParaView-v5.7.0/Wrapping/Python/paraview/simple.py	2020-03-04 18:01:36.043382025 +0100
@@ -47,6 +47,9 @@
 import sys
 import warnings
 
+from threading import Thread
+from time import sleep, time
+
 if sys.version_info >= (3,):
     xrange = range
 
@@ -2443,6 +2446,266 @@
     view = property(get_view, set_view)
     source = property(get_source, set_source)
 
+
+class CatalystConnection:
+
+    _EventChecker = None
+    _version = "0.4.0"
+
+    def vtkObserver(self, EventObject, EventType):
+        #print(EventType)
+        if EventType is None:
+            return None
+        if EventType == "UpdateEvent": # called for new insitu data
+            for i in range(len(self.updatefunctions)):
+                self.updatefunctions[i]()
+            return True
+        if EventType == "ConnectionCreatedEvent": # called when Connection is established
+            self._connected = True
+            return True
+        if EventType == "ConnectionClosedEvent": # called when Connection is closed
+            self._connected = False
+            self._isPaused = False
+            return True
+        if EventType == "UpdatePropertyEvent":
+            return True
+        if EventType == "PropertyModifiedEvent":
+            return True
+        if EventType == "ModifiedEvent":
+            return True
+        servermanager.vtk.vtkLogger.Log(servermanager.vtk.vtkLogger.VERBOSITY_WARNING, __file__, 31, "Unknown Event Type in catalyst connection: " + EventType)
+        return False
+
+
+    def __init__(self,):
+        self.updatefunctions = []
+        self._connected = False
+        self._session = None
+        self._delay = 0.01
+
+        servermanager.vtkProcessModule.GetProcessModule().MultipleSessionsSupportOn()
+
+        if not CatalystConnection._EventChecker:
+            _EventChecker = CatalystConnection.__EventChecker(self._delay)
+            _EventChecker.StartRegularChecks()
+
+
+    def Start(self, port = 22222):
+        """
+        Open Catalyst port, so the simulation can connect
+        """
+        if self.IsConnected():
+            return False;
+
+        activeConnection = servermanager.ActiveConnection
+
+        self._InProxy = servermanager.CreateProxy("coprocessing","LiveInsituLink")        
+        adaptor = self._InProxy.SafeDownCast(self._InProxy)
+
+        adaptor.AddObserver(servermanager.vtk.vtkCommand.AnyEvent, self.vtkObserver)
+
+        servermanager.vtkSMPropertyHelper(adaptor, "InsituPort").Set(port)
+        servermanager.vtkSMPropertyHelper(adaptor, "ProcessType").Set("Visualization")
+
+        adaptor.UpdateVTKObjects()
+
+        self._session = adaptor.GetSession()
+        self._connection = servermanager.GetConnectionFromId(self._session.ConnectToCatalyst())
+        self._isPaused = False
+
+        self._InProxy.SetInsituProxyManager(self._connection.Session.GetSessionProxyManager())
+
+        adaptor.InvokeCommand("Initialize")
+
+        servermanager.SetActiveConnection(activeConnection)   
+
+
+
+    def IsConnected(self):
+        """
+        True if the simulation is connected, false if the simulation is not yet connected, or disconnected
+        """
+        return self._connected
+
+    def IsPaused(self):
+        """
+        True if the simulation is Paused, false if the simulation is running, or there is not connection to a simulation
+        """
+        return self._isPaused
+
+    def BlockTillConnected(self, timeout = 0):
+        """
+        block till connection is established by simulation, or the timeout in seconds is eclipsed, default is 0, therefore without timeout
+        """
+        start = time()
+        while (time() - start < timeout) or timeout == 0:
+            sleep(self._delay)
+            if self.IsConnected():
+                return True
+        return False;
+
+    def BlockTillNextUpdate(self, timeout = 0):
+        """
+        block till next update happend by simulation, or the timeout in seconds is eclipsed, default is 0, therefore without timeout
+        """
+        start = time()
+        oldUpdates = self.GetTimeStep()
+        while (time() - start < timeout) or timeout == 0:
+            sleep(self._delay)
+            if oldUpdates < self.GetTimeStep():
+                return True
+        return False;
+
+    def BlockTillTimeStepAndPause(self, TimeStep, timeout = 0):
+        """
+        block till time step is reached and then pause the simulation, or the timeout in seconds is eclipsed, default is 0, therefore without timeout.
+        """
+        start = time()
+        while (time() - start < timeout) or timeout == 0:
+            sleep(self._delay)
+            if TimeStep -1 <= self.GetTimeStep(): # needs to step to pause the simulation, therefore activate pause one step early
+                self.SetPauseSimulation(True)
+                return True
+        return False;
+
+
+    def OutputAvaiable(self, ChannelInformation = ['input', 0]):
+        """
+        Check if this combination of ChannelName and port is avaible in simulation data
+        """
+        if self.IsConnected() == False:
+            return False
+        return self.GetCatalystSources().count(ChannelInformation) == 1
+
+
+    def GetCatalystSources(self):
+        """
+        List all avaiable combinations of data output the simulation offers
+        """
+        if self.IsConnected() == False:
+            return None
+        collection = servermanager.vtk.vtkCollection()
+        self._InProxy.GetInsituProxyManager().GetProxies("sources", collection)
+        Channels = []
+        for i in range(collection.GetNumberOfItems()):
+            proxy = collection.GetItemAsObject(i)
+            if proxy.GetVTKClassName() == "vtkPVTrivialProducer":
+                for j in range(proxy.GetNumberOfOutputPorts()):
+                    Channels.append([proxy.GetLogName(), j])
+        return Channels        
+
+
+    def Extract(self, extractName, ChannelInformation = ['input', 0]):
+        """
+        Extract sources from the catalyst connection into the normal pipeline, so it can be used.
+        Returns the Source Object, named extractName. On error returns None.
+        """
+        if self.IsConnected() == False:
+            servermanager.vtk.vtkLogger.Log(servermanager.vtk.vtkLogger.VERBOSITY_WARN, __file__, 144, "Catalyst simulation is not yet connected")
+            return None
+        if self.OutputAvaiable(ChannelInformation) == False:
+            servermanager.vtk.vtkLogger.Log(servermanager.vtk.vtkLogger.VERBOSITY_WARN, __file__, 147, "No output for this channelInformation avaiable: " + str(ChannelInformation))
+            return None
+        if FindSource(extractName) is not None:
+            servermanager.vtk.vtkLogger.Log(servermanager.vtk.vtkLogger.VERBOSITY_WARN, __file__, 150, "There is already a source named " + extractName)
+            return None
+        self.EProxy = self._InProxy.CreateExtract("sources", ChannelInformation[0], ChannelInformation[1])
+        servermanager.ActiveConnection.Session.GetSessionProxyManager().RegisterProxy("sources", extractName, self.EProxy)
+
+        return FindSource(extractName)
+
+    def GetTimeStep(self):
+        """
+        Returns the timeStep of the visible data
+        """
+        return self._InProxy.GetTimeStep()
+
+    def SetPauseSimulation(self, pause):
+        """
+        Allows to pause and unpause the simulation
+        """
+        if self.IsConnected() == False:
+            return
+        if self._isPaused == bool(pause):
+            return
+        self._isPaused = bool(pause)
+        servermanager.vtkSMPropertyHelper(self._InProxy, "SimulationPaused").Set(self._isPaused)
+        self._InProxy.UpdateVTKObjects()
+        if not self._isPaused:
+            self._InProxy.InvokeCommand("LiveChanged")
+
+    def SetLoopDelay(self, delay):
+        self._delay = delay
+        _EventChecker.TimerDelay = delay
+
+    def AddUpdateFunction(self, func):
+        """
+        Add a function that will be called, when the catalyst data is updated.
+        This function will be called without any arguments.
+        """
+        self.updatefunctions.append(func)  
+
+    def LengthUpdateFunctions(self):
+        """
+        Number of functions that will be called, when the catalyst data is updated.
+        """
+        return len(self.updatefunctions)
+
+    def RemoveUpdateFunction(self, func):
+        """
+        Remove a function that would be called, when the catalyst data is updated.
+        """
+        return self.updatefunctions.remove(func)
+
+    def ClearUpdateFunctions(self):
+        """
+        Remove all functions that would be called, when the catalyst data is updated.
+        """
+        self.updatefunctions = []
+
+
+
+
+    class __EventChecker:
+        def __init__(self, delay = 0.01):
+            self.TimerDelay = delay # Delay between calls to check nam for new events
+            self._Running = False
+            self._session = servermanager.ProxyManager().GetSession()
+            self._nam = servermanager.vtkProcessModule.GetProcessModule().GetNetworkAccessManager()
+
+        def CheckForUpdates(self):
+            """
+            Calls processEvents(), till all events are processed
+            """
+            if self._session is None:
+                return
+            if isinstance(self._session, servermanager.vtkSMSessionClient):
+                if not self._session.IsNotBusy():
+                    return
+            while self._nam.ProcessEvents(1):
+                temp = self._nam.ProcessEvents(1)
+
+        def _RegularChecks(self):
+            """
+            starts an infinte loop, regularily calling CheckForUpdates(), needs a valid value set for self.timerDelay
+            """
+            if self._Running:
+                return False
+            self._Running = True
+            self._doRegularChecks = True
+            while self._doRegularChecks:
+                sleep(self.TimerDelay)
+                self.CheckForUpdates()
+            self._Running = False
+
+        def StartRegularChecks(self):
+            """
+            Starts a seperate thread to do regular checks in the background
+            """
+            thread = Thread(target=self._RegularChecks, args=())
+            thread.daemon=True
+            thread.start()
+
 # -----------------------------------------------------------------------------
 
 class _funcs_internals:
