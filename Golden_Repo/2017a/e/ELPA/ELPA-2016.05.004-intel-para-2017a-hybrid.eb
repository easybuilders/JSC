# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
##
# This file is an EasyBuild reciPY as per https://github.com/hpcugent/easybuild
#
# Authors::   Inge Gutheil <i.gutheil@fz-juelich.de>, Alan O'Cais <a.ocais@fz-juelich.de>
# License::   MIT/GPL
# $Id$
#
##

easyblock = 'ConfigureMake'

name = 'ELPA'
version = '2016.05.004'
versionsuffix = '-hybrid'


homepage = 'http://elpa.rzg.mpg.de'
description = """Eigenvalue SoLvers for Petaflop-Applications .
ELPA has been installed as module in
$EBROOTELPA ($ELPA_ROOT is also defined).
In this installation the pure MPI version and the
hybrid version with OpenMP are both available.
Several assembly kernels have been compiled.
They can be chosen at runtime when calling the library or 
with the environment variables REAL_ELPA_KERNEL or COMPLEX_ELPA_KERNEL.
An example is
export REAL_ELPA_KERNEL=REAL_ELPA_KERNEL_GENERIC 
which chooses the generic real kernel for elpa2.
You can get an overview over the available kernels by 
loading elpa and then submitting a batch job with
srun --ntasks=1 $EBROOTELPA/bin/elpa2_print_kernels
Usage: Programs using this ELPA library have to be compiled with
-I$ELPA_INCLUDE_OPENMP/ -I$ELPA_INCLUDE_OPENMP/elpa -I$ELPA_MODULES_OPENMP (hybrid)
and linked with
-L$EBROOTELPA/lib -lelpa_openmp
-lmkl_scalapack_lp64 -lmkl_blacs_intelmpi_lp64 -lmkl_intel_lp64 
-lmkl_intel_thread -lmkl_core -liomp5 -lpthread -lstdc++
Examples: Examples can be found in $EBROOTELPA/share/doc/elpa/examples
They only work if the threaded MPI
version is loaded because they use
MPI_INIT_THREAD in the hybrid version. Programs
calling elpa without MPI_INIT_THREAD also work with the hybrid version 
and the sequential MPI version (MPI version without -mt).

"""

toolchain = {'name': 'intel-para', 'version': '2017a'}
toolchainopts = {'optarch': True, 'usempi': True}

source_urls = ['http://elpa.mpcdf.mpg.de/html/Releases/%(version)s/']
sources = [SOURCELOWER_TAR_GZ]

patches = [
    'ELPA-%(version)s_install-libelpatest.patch',
]

builddependencies = [
    ('Automake', '1.15'),
]

parallel=1

preconfigopts = 'autoreconf && '

common_configopts = 'FCFLAGS="-I$EBROOTIMKL/mkl/include/intel64/lp64 $FCFLAGS" '
common_configopts += 'LIBS="$LIBSCALAPACK" '

# Just hybrid version built
configopts = [
    common_configopts + '--enable-openmp FCFLAGS="-qopenmp $FCFLAGS"',
]

buildopts = ' V=1 '

postinstallcmds = [
    'cp config.h config-f90.h %(installdir)s/share/doc/elpa/examples',
    'cp %(builddir)s/elpa-%(version)s/test/Fortran/Makefile_examples_hybrid %(installdir)s/share/doc/elpa/examples',
    'cp %(builddir)s/elpa-%(version)s/test/Fortran/elpa_print_headers.X90 %(installdir)s/share/doc/elpa/examples',
    'cp %(builddir)s/elpa-%(version)s/private_modules/* %(installdir)s/include/elpa_openmp-%(version)s/modules',
]

sanity_check_paths = {
    'files': [
        'lib/libelpa_openmp.a', 'lib/libelpa_openmp.%s' % SHLIB_EXT,
        'lib/libelpatest_openmp.a', 'lib/libelpatest_openmp.%s' % SHLIB_EXT,
        'share/doc/elpa/examples/config.h',
        'share/doc/elpa/examples/config-f90.h',
    ],
    'dirs': [
        'bin', 'include/elpa_openmp-%(version)s/elpa',
        'include/elpa_openmp-%(version)s/modules', 'lib/pkgconfig',
    ],
}

modextravars = {
    'ELPA_ROOT': '%(installdir)s',
    'ELPAROOT': '%(installdir)s',
    'ELPA_INCLUDE_OPENMP': '%(installdir)s/include/elpa_openmp-%(version)s/',
    'ELPA_LIB': '%(installdir)s/lib',
    'ELPA_MODULES_OPENMP': '%(installdir)s/include/elpa_openmp-%(version)s/modules'
}

moduleclass = 'math'
