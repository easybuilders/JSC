# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
easyblock = 'PackedBinary'
name = 'Julia.CUDA'
version = '2.0.2'

homepage = 'https://juliagpu.gitlab.io/CUDA.jl'
description = """The CUDA.jl package is the main entrypoint for for programming NVIDIA GPUs using CUDA.
The package makes it possible to do so at various abstraction levels,
from easy-to-use arrays down to hand-written kernels using low-level CUDA APIs.
"""


toolchain = {'name': 'gcccoremkl', 'version': '9.3.0-2020.2.254'}
toolchainopts = {'pic': True}

sources = [{
    'source_urls': ['https://github.com/JuliaGPU/CUDA.jl/archive/'],
    'filename': 'CUDA.jl-%(version)s.tar.gz',
    'download_filename': 'v%(version)s.tar.gz',
    'extract_cmd': "tar xfvz %s",
}]

builddependencies = [
    ('binutils', '2.34'),
]

dependencies = [
    ('Julia', '1.5.2', '', ('gcccoremkl', '9.3.0-2020.2.254')),
    ('CUDA', '11.0', '', SYSTEM),
]

extract_sources = True
install_cmd = (
    'cd %(builddir)s/CUDA.jl-%(version)s/; '
    'export JULIA_DEPOT_PATH=%(installdir)s; '
    '$EBROOTJULIA/bin/julia -e \'using Pkg; Pkg.add("CUDA"); Pkg.build("CUDA", verbose=true)\'; '
    '$EBROOTJULIA/bin/julia -e \'import CUDA\' ')

modextrapaths = {
    'PATH': 'bin',
    'JULIA_DEPOT_PATH': '',
}

# Ensure that the user-specific $HOME/.julia is always first entry in JULIA_DEPOT_PATH
modluafooter = """
prepend_path("JULIA_DEPOT_PATH", pathJoin(os.getenv("HOME"), ".julia"))
add_property("arch","gpu")
"""

sanity_check_paths = {
    'files': [],
    'dirs': ['registries', 'packages/CUDA']
}

moduleclass = 'lang'
