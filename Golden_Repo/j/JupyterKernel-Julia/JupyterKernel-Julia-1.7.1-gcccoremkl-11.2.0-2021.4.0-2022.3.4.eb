# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
easyblock = 'JuliaBundle'

name = 'JupyterKernel-Julia'
version = '1.7.1'
local_jupyterver = '2022.3.4'
versionsuffix = '-' + local_jupyterver

homepage = 'https://github.com/JuliaLang/IJulia.jl'
description = """
Native Julia kernel for Jupyter.
Project Jupyter exists to develop open-source software, open-standards, and services
for interactive computing across dozens of programming languages.
"""

toolchain = {'name': 'gcccoremkl', 'version': '11.2.0-2021.4.0'}
toolchainopts = {'pic': True}

builddependencies = [
    ('binutils', '2.37'),
]

dependencies = [
    ('Python', '3.9.6'),
    ('Julia', version),
]

components = [
    ('julia', '0.5.6', {
        'easyblock': 'PythonPackage',
        'use_pip': True,
        'sources': ['v%(version)s.tar.gz'],
        'source_urls': ['https://github.com/JuliaPy/pyjulia/archive/'],
        'checksums': [('sha256', 'ca4a1dc3df9b770dacbbecab5495cae817a5dde0ac2d3ff1db1f8e447f0e48b7')],
        'download_dep_fail': True,
        'start_dir': 'pyjulia-%(version)s',
    }),
]

local_jupyter_path = 'share/jupyter'

exts_defaultclass = 'JuliaPackage'
exts_list = [
    ('ZMQ', '1.2.1', {
        'source_tmpl': 'v%(version)s.tar.gz',
        'source_urls': ['https://github.com/JuliaInterop/ZMQ.jl/archive/'],
        'checksums': [('sha256', '8b42555340d0208e5a36cd5e8f29a3f0d44c13c064382d4b1e5d00c1c4a9dd96')],
    }),
    ('Interact', '0.10.4', {
        'source_tmpl': 'v%(version)s.tar.gz',
        'source_urls': ['https://github.com/JuliaGizmos/Interact.jl/archive/'],
        'checksums': ['e1014435b806a656af56a6b635c7bfac82ba46ffe6a1fe8830d29dd60600fb81'],
    }),
    ('LanguageServer', '4.1.0', {
        'source_tmpl': 'v%(version)s.tar.gz',
        'source_urls': ['https://github.com/julia-vscode/LanguageServer.jl/archive/'],
        'checksums': ['20353fc0d34ca31ed0c78ab9cf565524700e4e4731aab87dfe9f05eca603f614'],
    }),
    ('SymbolServer', '7.0.1', {
        'source_tmpl': 'v%(version)s.tar.gz',
        'source_urls': ['https://github.com/julia-vscode/SymbolServer.jl/archive/'],
        'checksums': ['5186b777358af611c6b99d7d2c04345e866dfc0b74bc282d45357ed73c4a0ee2'],
    }),
    ('IJulia', '1.23.3', {
        # installs ijulia in JULIA_DEPOT_PATH and kernel in $JUPYTER_DATA_DIR/kernels
        'source_tmpl': 'v%(version)s.tar.gz',
        'source_urls': ['https://github.com/JuliaLang/IJulia.jl/archive/'],
        'checksums': ['1471ed94093efd24bae5e6ff1d3f7fa61901bf8834a737eeae2a9e620f50f07c'],
        'preinstallopts': 'export JUPYTER_DATA_DIR=%%(installdir)s/%s' % local_jupyter_path
    }),
]

modextrapaths = {
    'PYTHONPATH': ['lib/python%(pyshortver)s/site-packages'],
    'JUPYTER_PATH': [local_jupyter_path],  # add search path for kernelspecs
}

# Ensure that the user-specific $HOME/.local/share/jupyter is always first entry in JUPYTHER_PATH
modluafooter = """
prepend_path("JUPYTER_PATH", pathJoin(os.getenv("HOME"), ".local/share/jupyter"))
"""

postinstallcmds = [
    # Create virtual environment to ensure we install in the correct directory !!!
    'python3 -m venv %(installdir)s --system-site-packages',
    'mkdir -p %%(installdir)s/%s' % local_jupyter_path,
    (
        '{ cat > %%(builddir)s/env.sh; } << \'EOF\'\n'
        '#!/bin/bash\n'
        'source %%(installdir)s/bin/activate\n'
        'export PYTHONPATH=%%(installdir)s/lib/python%%(pyshortver)s/site-packages:${PYTHONPATH}\n'
        ''
        'export JULIA_DEPOT_PATH=${EBJULIA_STD_DEPOT_PATH}:${EBJULIA_ADMIN_DEPOT_PATH}\n'
        'export JUPYTER_DATA_DIR=%%(installdir)s/%s\n'
        'EOF'
    ) % (local_jupyter_path),

    # configure Python<->Julia bridge (of python package julia)
    'source %(builddir)s/env.sh && python -c "import julia; julia.install()"',

    # Ensure we remove the virtuel environment to avoid wrong search path for python packages
    'rm -f %(installdir)s/pyvenv.cfg',
    'rm -f %(installdir)s/bin/python',
    'rm -f %(installdir)s/bin/python3',
    'rm -f %(installdir)s/bin/activate',
    'rm -f %(installdir)s/bin/activate*',
    'rm -f %(installdir)s/bin/easy_install*',
    'rm -f %(installdir)s/bin/pip*',
    'rm -rf %(installdir)s/lib/python%(pyshortver)s/site-packages/_distutils_hack',
    'rm -f %(installdir)s/lib/python%(pyshortver)s/site-packages/distutils-precedence.pth',
    'rm -rf %(installdir)s/lib/python%(pyshortver)s/site-packages/pip',
    'rm -rf %(installdir)s/lib/python%(pyshortver)s/site-packages/pip-*',
    'rm -rf %(installdir)s/lib/python%(pyshortver)s/site-packages/pkg_resources',
    'rm -rf %(installdir)s/lib/python%(pyshortver)s/site-packages/setuptools',
    'rm -rf %(installdir)s/lib/python%(pyshortver)s/site-packages/setuptools-*',
]

# specify that Bundle easyblock should run a full sanity check, rather than just trying to load the module
# full_sanity_check = True
sanity_check_paths = {
    'files': [
        'share/jupyter/kernels/julia-%(version_major_minor)s/kernel.json',
    ],
    'dirs': [
        'lib/python%(pyshortver)s/site-packages',
        'share/jupyter/kernels/julia-%(version_major_minor)s/',
    ],
}

moduleclass = 'tools'
