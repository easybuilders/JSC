# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
##
# This is an easyconfig file for EasyBuild, see https://github.com/easybuilders/easybuild
# Copyright:: Copyright 2013-2021 Juelich Supercomputing Centre, Germany
# Authors::   Bernd Mohr <b.mohr@fz-juelich.de>
#             Markus Geimer <m.geimer@fz-juelich.de>
#             Christian Feld <c.feld@fz-juelich.de>
# License::   3-clause BSD
#
# This work is based on experiences from the UNITE project
# http://apps.fz-juelich.de/unite/
##

easyblock = 'EB_Score_minus_P'

name = 'Score-P'
version = '7.1'

homepage = 'https://www.score-p.org'
description = """
The Score-P measurement infrastructure is a highly scalable and easy-to-use
tool suite for profiling, event tracing, and online analysis of HPC
applications.
"""

toolchain = {'name': 'gpsmpi', 'version': '2021b'}
# Building with architectural optimizations on the KNL booster prevents
# using the frontend tools on the frontend, and thus cross-compilation.
# But Score-P/Scalasca does not benefit much from vectorization anyway.
toolchainopts = {'optarch': False}

source_urls = ['http://perftools.pages.jsc.fz-juelich.de/cicd/scorep/tags/scorep-%(version)s']
sources = ['scorep-%(version)s.tar.gz']
checksums = [
    '98dea497982001fb82da3429ca55669b2917a0858c71abe2cfe7cd113381f1f7',  # scorep-7.1.tar.gz
]

builddependencies = [
    ('CubeLib', '4.6'),
    ('CubeWriter', '4.6'),
    # Unwinding/sampling support (optional):
    ('libunwind', '1.5.0'),
]

dependencies = [
    # binutils is implicitly available via GCC toolchain
    ('OPARI2', '2.0.6'),
    ('OTF2', '2.3'),
    # Hardware counter support (optional):
    ('PAPI', '6.0.0.1'),
    # PDT source-to-source instrumentation support (optional):
    ('PDT', '3.25.1'),
]

configopts = '--enable-shared '

sanity_check_paths = {
    'files': ['bin/scorep', 'include/scorep/SCOREP_User.h',
              ('lib/libscorep_adapter_mpi_event.a', 'lib64/libscorep_adapter_mpi_event.a'),
              ('lib/libscorep_adapter_mpi_event.%s' % SHLIB_EXT, 'lib64/libscorep_adapter_mpi_event.%s' % SHLIB_EXT)],
    'dirs': [],
}

# Ensure that local metric documentation is found by CubeGUI
modextrapaths = {'CUBE_DOCPATH': 'share/doc/scorep/profile'}

moduleclass = 'perf'
