# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
name = 'SciPy-Stack'
version = '2018a'
versionsuffix = '-Python-%(pyver)s'

numpyversion = '1.14.2'

homepage = 'http://www.scipy.org'
description = """SciPy Stack is a collection of open source software for scientific computing in Python."""


toolchain = {'name': 'gpsmkl', 'version': '2018a'}
toolchainopts = { 'pic' : True }

# We replace the interpreter to get exp and trigonometrical functions from libimf
source_urls = ['http://www.python.org/ftp/python/%(pyver)s/']
sources = ['Python-%(pyver)s.tgz']

builddependencies = [
    ('unzip', '6.0'),
]

###########################################################################
# WARNING: "six" is picked up from GC3Pie if it is loaded, causing an error
# To proceed, unload GC3Pie
###########################################################################

dependencies = [
    ('Python', '2.7.14'),
    ('freetype', '2.9'),
    ('libpng', '1.6.34'),
    ('libreadline', '7.0'),
    ('SQLite', '3.22.0'),
]

common_opts = {
    'req_py_majver': '2',
    'req_py_minver': '0'
}

prebuildopts = 'export LDSHARED="$CC -shared" && '

# this is a bundle of Python packages
exts_defaultclass = 'PythonPackage'
exts_filter = ('python -c "import %(ext_name)s"', '')

exts_list = [
    ('Cycler', '0.10.0', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/C/Cycler']),
        ('source_tmpl', 'cycler-%(version)s.tar.gz'),
        ('modulename', 'cycler'),
    ])),
    ('mpmath', '1.0.0', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/m/mpmath']),
    ])),
    ('numpy', numpyversion, dict(common_opts.items() + [
        #'source_urls': ['https://pypi.python.org/packages/source/n/numpy'],
        ('source_urls', ['https://github.com/numpy/numpy/releases/download/v%s/' % numpyversion]),
        ('patches', [
            'numpy-%s-mkl.patch' % numpyversion,
            'numpy-%s-xhost.patch' % numpyversion,
        ]),
    ])),
    ('scipy', '1.0.1', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/s/scipy']),
    ])),
    ('sympy', '1.1.1', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/s/sympy']),
    ])),
    ('pandas', '0.22.0', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/p/pandas']),
    ])),
    ('backports.functools_lru_cache', '1.5', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/b/backports.functools_lru_cache']),
    ])),
    ('matplotlib', '2.2.2', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/m/matplotlib']),
    ])),
    ('jupyter_client', '5.1.0', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/j/jupyter-client']),
    ])),
    ('pyzmq', '17.0.0', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/p/pyzmq']),
        ('modulename', 'zmq'),
    ])),
    ('tornado', '5.0.2', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/t/tornado']),
    ])),
    ('jupyter_core', '4.4.0', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/j/jupyter-core']),
    ])),
    ('backports_abc', '0.5', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/b/backports_abc']),
    ])),
    ('ipykernel', '4.8.2', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/i/ipykernel']),
    ])),
    ('singledispatch', '3.4.0.3', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/s/singledispatch']),
    ])),
    ('futures', '3.2.0', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/f/futures']),
        ('modulename', 'concurrent.futures'),
    ])),
    ('ipyparallel', '6.1.1', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/i/ipyparallel']),
        ('use_pip', True),
    ])),
    ('absl-py', '0.2.0', dict(common_opts.items() + [
        ('source_urls', ['https://pypi.python.org/packages/source/a/absl-py']),
        ('modulename', 'absl'),
    ])),
]

# specify that Bundle easyblock should run a full sanity check, rather than just trying to load the module
full_sanity_check = True

sanity_check_paths = {
    'files': [],
    'dirs': ['lib/python%(pyshortver)s/site-packages'],
}

modextrapaths = {'PYTHONPATH': ['lib/python%(pyshortver)s/site-packages']}

moduleclass = 'vis'
