# This file is part of JSC's public easybuild repository (https://github.com/easybuilders/jsc)
easyblock = 'Tarball'

name = 'NAGC'
version = 'Mark26'


homepage = 'http://www.nag.com/numeric/CL/CLdescription.asp'
description = """NAG (Numerical Algorithms Group) C Library Mark 26 (double
precisions). NAG C Mark 26 contains hundreds of functions covering a wide range
of mathematical and statistical areas.

To enhance the performance, the BLAS and LAPACK routines of the MKL are used.

The complete documentation is available online with

https://www.nag.co.uk/numeric/cl/nagdoc_cl26/html/frontmatter/manconts.html
"""

usage = """
The library is licensed. The necessary licence is provided through the
environment variable NAG_KUSARI_FILE. By default the resource manager exports
all variables to the compute nodes, if you disable this behaviour you will need
to make the environment variable known to the compute nodes by adding: 

  --exports=NAG_KUSARI_FILE

in the srun statement.

Compiling and linking can be done in the following manner:

icc userprog.c -I$EBROOTNAGC/include -m64 -L$EBROOTIMKL/mkl/lib/intel64\
       -lnagc  -lmkl_intel_lp64 -lmkl_intel_thread  -lmkl_core  -liomp5  -lpthread
"""

examples = """
To see how to use a special NAGC routine please call the script nagc_example, 
e.g.: 

 nagc_example f08tac

An example program and the input data (if necessary) are copied to the current 
directory. The example program is compiled, linked and executed. 
"""


toolchain = {'name': 'gpsmkl', 'version': '2019a'}
sources = [SOURCELOWER_TAR_GZ]

sanity_check_paths = {
    'files': [],
    'dirs': ["include", "lib", "examples"],
}

modextravars={
     'NAG_KUSARI_FILE': '/usr/local/software/licenses/NAGC/Mark26/license.dat',
}

modluafooter='setenv("MKLPATH", pathJoin(os.getenv("MKLROOT"),"lib/intel64"))'

moduleclass = 'numlib'
